<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Wed Dec 30 2020 08:00:00 GMT+0800 (中国标准时间)</title>
    <url>/notes/2020-12-30/</url>
    <content><![CDATA[<p>线上事故</p>
<p>原因是docker打包的时候，使用了本地的缓存基础镜像，云端的基础镜像被修改后，没有同步到本地。</p>
<p>处理办法：</p>
<p>回滚上次版本，暂时规避异常</p>
<p>解决办法：</p>
<p>删掉本地的镜像，打包的时候，会重新从云端拉取新镜像</p>
 <a id="more"></a>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>ERROR</tag>
      </tags>
  </entry>
  <entry>
    <title>Anonymous-Proxy</title>
    <url>/notes/anonymous-proxy/</url>
    <content><![CDATA[<p><strong>基于adsl技术搭建高匿名代理</strong></p>
<ul>
<li>需要vps主机</li>
<li>使用高匿名代理软件tinyproxy</li>
<li>redis作为代理池</li>
<li>使用tornado搭建api接口服务</li>
</ul>
<p><strong>参考链接</strong></p>
<p><a href="https://cuiqingcai.com/8361.html">崔老师-ADSL 拨号代理</a></p>
<a id="more"></a>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>II</tag>
        <tag>Spider</tag>
      </tags>
  </entry>
  <entry>
    <title>Common-Naming</title>
    <url>/notes/common-naming/</url>
    <content><![CDATA[<p><strong>命名-常用的词汇</strong></p>
<p><em>1</em>、auxiliary 辅助的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aux_  辅助的</span><br><span class="line">aux_list, aux_set</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>IV</tag>
        <tag>Messy</tag>
      </tags>
  </entry>
  <entry>
    <title>Css</title>
    <url>/notes/css/</url>
    <content><![CDATA[<h4 id="CSS笔记"><a href="#CSS笔记" class="headerlink" title="CSS笔记"></a>CSS笔记</h4><p><a href="https://blog.csdn.net/weixin_43342105/article/details/106325167">CSS复习笔记整理</a></p>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:orange;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*这是个注释*/</span></span><br></pre></td></tr></table></figure>

<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#para1</span><br><span class="line">&#123;</span><br><span class="line">    text-align:center;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="class选择权"><a href="#class选择权" class="headerlink" title="class选择权"></a>class选择权</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.center &#123;text-align:center;&#125;</span><br><span class="line"># 指定p元素使用class&#x3D;&quot;center&quot;</span><br><span class="line">p.center &#123;text-align:center;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="样式表-3种导入方式"><a href="#样式表-3种导入方式" class="headerlink" title="样式表-3种导入方式"></a>样式表-3种导入方式</h4><p><strong>外部样式表</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>内部样式表</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">hr</span> &#123;<span class="attribute">color</span>:sienna;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>:<span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">&quot;images/back40.gif&quot;</span>);&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>内联样式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p style&#x3D;&quot;color:sienna;margin-left:20px&quot;&gt;这是一个段落。&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<h4 id="常用样式"><a href="#常用样式" class="headerlink" title="常用样式"></a>常用样式</h4><ul>
<li>背景 – 可以定义颜色，图片</li>
<li>文本 – 颜色、对齐、修饰等</li>
<li>字体 – 字体、大小、粗细等</li>
<li>链接 – 点击等</li>
<li>边框样式 – 上下左右可以分别设置</li>
<li>轮廓 – 不占位置</li>
</ul>
<h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4> <img src="/Users/zhou/Library/Application Support/typora-user-images/image-20201006132106262.png" alt="image-20201006132106262" style="zoom:50%;" />

<p><strong>例子：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    border: 25px solid green;</span><br><span class="line">    padding: 25px;</span><br><span class="line">    margin: 25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分组和嵌套"><a href="#分组和嵌套" class="headerlink" title="分组和嵌套"></a>分组和嵌套</h4><ul>
<li>分组：每个选择器用逗号分隔</li>
<li>嵌套：空格隔开</li>
</ul>
<h3 id="元素显示和隐藏"><a href="#元素显示和隐藏" class="headerlink" title="元素显示和隐藏"></a>元素显示和隐藏</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">visibility</span><span class="selector-pseudo">:hidden</span>;  <span class="comment">/* 隐藏，占位 */</span></span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:none</span>;  <span class="comment">/* 隐藏，不占位 */</span></span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline</span>;  <span class="comment">/* 内联元素 */</span></span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:block</span>;  <span class="comment">/* 块元素 */</span></span><br></pre></td></tr></table></figure>

<h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* top, bottom, left, right */</span></span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">static</span>; <span class="comment">/* 静态定位的元素不会受到 top, bottom, left, right影响。 */</span></span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:fixed</span>;  <span class="comment">/* 元素的位置相对于浏览器窗口是固定位置。 */</span></span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;  <span class="comment">/* 相对定位元素的定位是相对其正常位置。*/</span></span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;  <span class="comment">/* absolute 定位使元素的位置与文档流无关，因此不占据空间。*/</span></span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">sticky</span>;  <span class="comment">/* 粘性定位 */</span></span><br><span class="line"><span class="selector-tag">z-index</span><span class="selector-pseudo">:-1</span>; <span class="comment">/* z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）*/</span></span><br></pre></td></tr></table></figure>

<h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>overflow 属性用于控制内容溢出元素框时显示的方式</li>
<li>浮动 float</li>
<li>对齐 margin: auto;</li>
<li>图片透明 opacity:1.0;</li>
</ul>
<h4 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a:link &#123;color:#000000;&#125;      &#x2F;* 未访问链接*&#x2F;</span><br><span class="line">a:visited &#123;color:#00FF00;&#125;  &#x2F;* 已访问链接 *&#x2F;</span><br><span class="line">a:hover &#123;color:#FF00FF;&#125;  &#x2F;* 鼠标移动到链接上 *&#x2F;</span><br><span class="line">a:active &#123;color:#0000FF;&#125;  &#x2F;* 鼠标点击时 *&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="CSS3规范"><a href="#CSS3规范" class="headerlink" title="CSS3规范"></a>CSS3规范</h4><ul>
<li><p>边框</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius:10px; 圆角</span><br><span class="line">box-shadow: 10px 10px 5px #888888;  阴影</span><br><span class="line">border-image:url(border.png) 30 30 round;  边界图片</span><br></pre></td></tr></table></figure>
</li>
<li><p>背景、渐变、文本效果、字体</p>
</li>
<li><p>2D和3D</p>
</li>
<li><p>过渡、动画等</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Debug-Print</title>
    <url>/notes/debug-print/</url>
    <content><![CDATA[<p>使用print在docker中调试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">docker不会输出python的print(),需要这样写才会输出：加上flush=<span class="literal">True</span></span><br><span class="line">例子: print(<span class="string">&quot;debug...&quot;</span>, flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>Messy</tag>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Create-New-Branch</title>
    <url>/notes/create-new-branch/</url>
    <content><![CDATA[<h4 id="在一个项目中创建一个完全空白的分支"><a href="#在一个项目中创建一个完全空白的分支" class="headerlink" title="在一个项目中创建一个完全空白的分支"></a>在一个项目中创建一个完全空白的分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数 --orphan，这个参数的主要作用有两个，一个是拷贝当前所在分支的所有文件，另一个是没有父结点，可以理解为没有历史记录，是一个完全独立背景干净的分支。</span><br></pre></td></tr></table></figure>

<p>具体操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个orphan的分支，这个分支是独立的</span></span><br><span class="line">git checkout --orphan gh-pages</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除原来代码树下的所有文件</span></span><br><span class="line">git rm -rf .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交初始化，才能在分支查看中出现</span></span><br><span class="line">git commit -am &quot;init this branch&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>IV</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Decorator</title>
    <url>/notes/decorator/</url>
    <content><![CDATA[<h3 id="装饰器（装饰模式）"><a href="#装饰器（装饰模式）" class="headerlink" title="装饰器（装饰模式）"></a>装饰器（装饰模式）</h3><h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 两层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;log&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三层：针对decorator有参数的时候</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorater</span>(<span class="params">func</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args, **kw</span>):</span></span><br><span class="line">            print(<span class="string">&#x27;log:&#x27;</span>, text)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorater</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log(&#x27;text&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">@functools.wraps(func)  # 将函数func的一些特殊属性复制给wrapper函数（最里层函数）</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Design-Patterns</title>
    <url>/notes/design-patterns/</url>
    <content><![CDATA[<p>笔记资源</p>
<p><a href="https://www.cnblogs.com/tangkaishou/p/9246353.html">常见的设计模式python实现</a></p>
]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-Jinja2</title>
    <url>/notes/django-jinja2/</url>
    <content><![CDATA[<h4 id="配置Jinja2模板引擎"><a href="#配置Jinja2模板引擎" class="headerlink" title="配置Jinja2模板引擎"></a>配置Jinja2模板引擎</h4><h5 id="1-安装Jinja2扩展包"><a href="#1-安装Jinja2扩展包" class="headerlink" title="1. 安装Jinja2扩展包"></a>1. 安装Jinja2扩展包</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install Jinja2</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

<h5 id="2-配置Jinja2模板引擎"><a href="#2-配置Jinja2模板引擎" class="headerlink" title="2. 配置Jinja2模板引擎"></a>2. 配置Jinja2模板引擎</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.jinja2.Jinja2&#x27;</span>,  <span class="comment"># jinja2模板引擎</span></span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="3-补充Jinja2模板引擎环境"><a href="#3-补充Jinja2模板引擎环境" class="headerlink" title="3. 补充Jinja2模板引擎环境"></a>3. 补充Jinja2模板引擎环境</h3><blockquote>
<p><strong>1.Jinja2创建模板引擎环境配置文件</strong></p>
</blockquote>
 <img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201124141009.png" alt="img" style="zoom:50%;" />

<blockquote>
<p><strong>2.编写Jinja2创建模板引擎环境配置代码</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.storage <span class="keyword">import</span> staticfiles_storage</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jinja2_environment</span>(<span class="params">**options</span>):</span></span><br><span class="line">    env = Environment(**options)</span><br><span class="line">    env.<span class="built_in">globals</span>.update(&#123;</span><br><span class="line">        <span class="string">&#x27;static&#x27;</span>: staticfiles_storage.url,</span><br><span class="line">        <span class="string">&#x27;url&#x27;</span>: reverse,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> env</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">确保可以使用Django模板引擎中的&#123;% url(&#x27;&#x27;) %&#125; &#123;% static(&#x27;&#x27;) %&#125;这类的语句 </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>3.补充Jinja2模板引擎环境</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.jinja2.Jinja2&#x27;</span>,  <span class="comment"># jinja2模板引擎</span></span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment"># 补充Jinja2模板引擎环境</span></span><br><span class="line">            <span class="string">&#x27;environment&#x27;</span>: <span class="string">&#x27;meiduo_mall.utils.jinja2_env.jinja2_environment&#x27;</span>, </span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置完成后：运行程序，测试结果。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-Mysql</title>
    <url>/notes/django-mysql/</url>
    <content><![CDATA[<h4 id="Django配置mysql数据库"><a href="#Django配置mysql数据库" class="headerlink" title="Django配置mysql数据库"></a>Django配置mysql数据库</h4><h5 id="1、安装PyMySQL"><a href="#1、安装PyMySQL" class="headerlink" title="1、安装PyMySQL"></a>1、安装PyMySQL</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure>

<h5 id="2、-在Django的工程同名子目录的init-py文件中添加如下语句"><a href="#2、-在Django的工程同名子目录的init-py文件中添加如下语句" class="headerlink" title="2、 在Django的工程同名子目录的init.py文件中添加如下语句"></a>2、 在Django的工程同名子目录的<strong>init</strong>.py文件中添加如下语句</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> install_as_MySQLdb</span><br><span class="line">install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="3、修改settings-py中DATABASES配置信息"><a href="#3、修改settings-py中DATABASES配置信息" class="headerlink" title="3、修改settings.py中DATABASES配置信息"></a>3、修改settings.py中DATABASES配置信息</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,  <span class="comment"># 数据库主机</span></span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,  <span class="comment"># 数据库端口</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 数据库用户名</span></span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;mysql&#x27;</span>,  <span class="comment"># 数据库用户密码</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_demo&#x27;</span>  <span class="comment"># 数据库名字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、在MySQL中创建数据库"><a href="#4、在MySQL中创建数据库" class="headerlink" title="4、在MySQL中创建数据库"></a>4、在MySQL中创建数据库</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create database django_demo default charset=utf8;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-Compose</title>
    <url>/notes/docker-compose/</url>
    <content><![CDATA[<h3 id="Docker-compose笔记"><a href="#Docker-compose笔记" class="headerlink" title="Docker-compose笔记"></a>Docker-compose笔记</h3><ul>
<li>这是一个docker-compose的小demo <a href="https://github.com/zhouyuanmin/DockerFileDemo">地址</a></li>
<li>清晰的阐述了docker-compose的基本操作</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/notes/docker/</url>
    <content><![CDATA[<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在docker反复build后，会存留很多none镜像，下面命令一键删除所有none镜像</span><br><span class="line">docker rmi &#96;docker images | grep  &#39;&lt;none&gt;&#39; | awk &#39;&#123;print $3&#125;&#39;&#96;</span><br><span class="line">或者</span><br><span class="line">docker rmi $(docker images -q -f dangling&#x3D;true)</span><br><span class="line"># 删除所有停止的容器</span><br><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>

<h4 id="删除所有未运行的容器"><a href="#删除所有未运行的容器" class="headerlink" title="删除所有未运行的容器"></a>删除所有未运行的容器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="docker-cp"><a href="#docker-cp" class="headerlink" title="docker cp"></a>docker cp</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab的&#x2F;www目录下。</span><br><span class="line">docker cp &#x2F;www&#x2F;runoob 96f7f14e99ab:&#x2F;www&#x2F;</span><br><span class="line"># 将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</span><br><span class="line">docker cp &#x2F;www&#x2F;runoob 96f7f14e99ab:&#x2F;www</span><br><span class="line"># 将容器96f7f14e99ab的&#x2F;www目录拷贝到主机的&#x2F;tmp目录中。</span><br><span class="line">docker cp  96f7f14e99ab:&#x2F;www &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul>
<li>镜像 Image</li>
<li>容器 Container，镜像的一个实例</li>
<li>仓库 Repository，用来存储镜像</li>
</ul>
<h5 id="容器使用-常用命令及参数"><a href="#容器使用-常用命令及参数" class="headerlink" title="容器使用-常用命令及参数"></a>容器使用-常用命令及参数</h5><p><em>运行容器命令 docker run</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令 docker run</span><br><span class="line">-i 标准输入，进行交互</span><br><span class="line">-t 指定伪终端</span><br><span class="line">-d 运行模式，后台运行</span><br><span class="line">-P 将容器内部使用的网络端口随机映射到我们使用的主机上</span><br><span class="line">-p 指定映射的端口</span><br><span class="line"># 例子</span><br><span class="line">docker run -i -t ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br><span class="line">docker run ubuntu:15.10 &#x2F;bin&#x2F;echo &quot;Hello world&quot;</span><br><span class="line">docker run -d -p [127.0.0.1:]5000:5000[&#x2F;udp] training&#x2F;webapp python app.py</span><br></pre></td></tr></table></figure>

<p><em>进入容器命令 docker exec</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令 docker exec</span><br><span class="line">docker exec -it container_id &#x2F;bin&#x2F;bash  # 退出不会停止容器</span><br><span class="line">docker attach container_id  # 退出会停止容器</span><br><span class="line"># 退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p><em>查看容器的命令 docker ps</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 命令 docker ps</span><br><span class="line">默认查看正在运行的容器</span><br><span class="line">-a 查看所有容器</span><br><span class="line">-l 查看最后一次创建的容器</span><br></pre></td></tr></table></figure>

<p><em>其他命令</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看容器的标准输出  -f 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。</span><br><span class="line">docker logs container_id</span><br><span class="line"># 运行容器</span><br><span class="line">docker start container_id</span><br><span class="line"># 停止容器</span><br><span class="line">docker stop container_id</span><br><span class="line"># 重启容器</span><br><span class="line">docker restart container_id</span><br><span class="line"># 获取容器</span><br><span class="line">docker pull ubuntu</span><br><span class="line"># 删除容器</span><br><span class="line">docker rm -f container_id</span><br><span class="line"># 导出容器</span><br><span class="line">docker export container_id &gt; ubuntu.tar</span><br><span class="line"># 导入容器</span><br><span class="line">cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</span><br><span class="line"># 通过url来导入</span><br><span class="line">docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tgz example&#x2F;imagerepo</span><br><span class="line"># 查看容器端口映射情况</span><br><span class="line">docker port container_id</span><br><span class="line"># 容器命名</span><br><span class="line">docker run -d -P --name mingzi training&#x2F;webapp python app.py</span><br></pre></td></tr></table></figure>

<h5 id="镜像使用-常用命令及参数"><a href="#镜像使用-常用命令及参数" class="headerlink" title="镜像使用-常用命令及参数"></a>镜像使用-常用命令及参数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看已有镜像</span><br><span class="line">docker images</span><br><span class="line"># 在网络中搜索镜像</span><br><span class="line">docker search python3</span><br><span class="line"># 下载镜像</span><br><span class="line">docker pull python3</span><br><span class="line"># 删除镜像</span><br><span class="line">docker rmi hello-world</span><br><span class="line"># --更新镜像--</span><br><span class="line">docker run -t -i ubuntu:15.10 &#x2F;bin&#x2F;bash # 运行一个容器</span><br><span class="line">在运行的容器内使用 apt-get update 命令进行更新。</span><br><span class="line">在完成操作之后，输入 exit 命令来退出这个容器。</span><br><span class="line">此时 ID 为 e218edb10161 的容器，是按我们的需求更改的容器。通过命令docker commit来提交容器副本。</span><br><span class="line">docker commit -m&#x3D;&quot;has update&quot; -a&#x3D;&quot;zuozhe&quot; e218edb10161 runoob&#x2F;ubuntu:v2</span><br><span class="line"># --使用Dockerfile文件来创建镜像--， -t指定创建的目标镜像名</span><br><span class="line">docker build -t runoob&#x2F;centos:biaoqian .  # 点好表示Dockerfile文件所在目录</span><br><span class="line"># 设置镜像标签</span><br><span class="line">docker tag image_id runoob&#x2F;centos:dev</span><br></pre></td></tr></table></figure>

<h5 id="Docker-容器连接"><a href="#Docker-容器连接" class="headerlink" title="Docker 容器连接"></a>Docker 容器连接</h5><p><em>网络端口映射</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -P training&#x2F;webapp python app.py</span><br><span class="line">docker run -d -p 5000:5000 training&#x2F;webapp python app.py</span><br><span class="line">docker run -d -p 127.0.0.1:5001:5000 training&#x2F;webapp python app.py</span><br><span class="line">docker run -d -p 127.0.0.1:5000:5000&#x2F;udp training&#x2F;webapp python app.py</span><br></pre></td></tr></table></figure>

<p><em>容器互联</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 新建网络</span><br><span class="line">docker network create -d bridge test-net </span><br><span class="line"># 查询网络</span><br><span class="line">docker network ls</span><br><span class="line"># 运行一个容器并连接到新建的 test-net 网络</span><br><span class="line">docker run -itd --name test1 --network test-net ubuntu &#x2F;bin&#x2F;bash </span><br><span class="line">docker run -itd --name test2 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<h5 id="Docker-仓库管理"><a href="#Docker-仓库管理" class="headerlink" title="Docker 仓库管理"></a>Docker 仓库管理</h5><h5 id="Docker-Dockerfile"><a href="#Docker-Dockerfile" class="headerlink" title="Docker Dockerfile"></a>Docker Dockerfile</h5><p><em>例子 - 创建一个Dockerfile文件，内容如下：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#39;这是一个本地构建的nginx镜像&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br><span class="line">COPY hom?.txt &#x2F;mydir&#x2F;</span><br><span class="line"># ADD</span><br><span class="line"># CMD</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 构造命令</span><br><span class="line">docker build -t nginx:v3 .</span><br><span class="line">&amp;&amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 常用命令</span></span><br><span class="line">RUN &lt;命令行命令&gt;   # 多个命令，以 &amp;&amp; 符号连接命令</span><br><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span><br><span class="line">ADD # ADD 指令和 COPY 的使用格式一致,官方推荐使用 COPY</span><br><span class="line">CMD [&quot;&lt;可执行文件或命令&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]  # CMD 在docker run 时运行。</span><br><span class="line">ENTRYPOINT [&quot;&lt;executeable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;,...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 环境变量</span></span><br><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</span><br><span class="line">ARG &lt;参数名&gt;[=&lt;默认值&gt;]  # 仅 docker build 的过程中有效</span><br><span class="line"><span class="meta">#</span><span class="bash"> 匿名数据卷</span></span><br><span class="line">VOLUME &lt;路径&gt;</span><br><span class="line">WORKDIR &lt;工作目录路径&gt;</span><br><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Doing-Projects</title>
    <url>/notes/doing-projects/</url>
    <content><![CDATA[<p><strong>自己负责项目的时候</strong></p>
<p>注意点：</p>
<ul>
<li>做一个项目一定要先调</li>
<li>可以节约时间成本（找到了一些资源代码）</li>
<li>可以找到具体的方向，实现目的的技术方向</li>
<li>可以查看市场现状，做出基本的评估</li>
<li>重点是风险评估</li>
</ul>
<a id="more"></a>

]]></content>
      <categories>
        <category>Management</category>
      </categories>
      <tags>
        <tag>IV</tag>
        <tag>Management</tag>
      </tags>
  </entry>
  <entry>
    <title>Email</title>
    <url>/notes/email/</url>
    <content><![CDATA[<h3 id="使用python发送邮件"><a href="#使用python发送邮件" class="headerlink" title="使用python发送邮件"></a>使用python发送邮件</h3><h4 id="发送邮件，带附件"><a href="#发送邮件，带附件" class="headerlink" title="发送邮件，带附件"></a>发送邮件，带附件</h4><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email <span class="keyword">import</span> encoders</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.base <span class="keyword">import</span> MIMEBase</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span>():</span></span><br><span class="line">    <span class="comment"># 邮件一般是由标题，发信人，收件人，邮件内容，附件等构成</span></span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&#x27;Worker&lt;1837@qq.com&gt;&#x27;</span>)  <span class="comment"># 发件人</span></span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = Header(<span class="string">&#x27;Administrators&lt;17859@163.com&gt;&#x27;</span>)  <span class="comment"># 收件人</span></span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&#x27;Work in 2020.&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>).encode()  <span class="comment"># 标题</span></span><br><span class="line">    msg.attach(MIMEText(<span class="string">&#x27;hello, work completed.&#x27;</span>, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 内容</span></span><br><span class="line"></span><br><span class="line">    zip_path = os.path.join(os.path.abspath(<span class="string">&#x27;.&#x27;</span>), <span class="string">&#x27;test.zip&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(zip_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        mime = MIMEBase(<span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, filename=zip_path)</span><br><span class="line">        <span class="comment"># 加上必要的头信息:</span></span><br><span class="line">        mime.add_header(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;attachment&#x27;</span>, filename=(<span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;test1.zip&#x27;</span>))</span><br><span class="line">        mime.add_header(<span class="string">&#x27;Content-ID&#x27;</span>, <span class="string">&#x27;&lt;0&gt;&#x27;</span>)</span><br><span class="line">        mime.add_header(<span class="string">&#x27;X-Attachment-Id&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">        <span class="comment"># 把附件的内容读进来:</span></span><br><span class="line">        mime.set_payload(f.read())</span><br><span class="line">    encoders.encode_base64(mime)</span><br><span class="line">    msg.attach(mime)</span><br><span class="line"></span><br><span class="line">    server = smtplib.SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>, <span class="number">25</span>)</span><br><span class="line">    server.starttls()  <span class="comment"># 加密</span></span><br><span class="line">    server.login(<span class="string">&quot;196@qq.com&quot;</span>, <span class="string">&quot;gphf&quot;</span>)  <span class="comment"># 授权码</span></span><br><span class="line">    server.sendmail(<span class="string">&quot;186@qq.com&quot;</span>, [<span class="string">&quot;17@163.com&quot;</span>, ], msg.as_string())</span><br><span class="line">    server.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send_email()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel-Csv</title>
    <url>/notes/excel-csv/</url>
    <content><![CDATA[<h3 id="使用csv操作excel、csv文件"><a href="#使用csv操作excel、csv文件" class="headerlink" title="使用csv操作excel、csv文件"></a>使用csv操作excel、csv文件</h3><p>Translation</p>
<ul>
<li>翻译官方文档-对应Python3.6</li>
<li><em>dialect</em> 方言，这里指定格式为 csv</li>
</ul>
<a id="more"></a>

<h4 id="模块内容"><a href="#模块内容" class="headerlink" title="模块内容"></a>模块内容</h4><ul>
<li>functions</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># csv.reader(csvfile, dialect=&#x27;excel&#x27;, **fmtparams)</span></span><br><span class="line"><span class="comment"># return: a list of strings</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;eggs.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    spamreader = csv.reader(csvfile, delimiter=<span class="string">&#x27; &#x27;</span>, quotechar=<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> spamreader:</span><br><span class="line">        print(<span class="string">&#x27;, &#x27;</span>.join(row))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># csv.writer(csvfile, dialect=&#x27;excel&#x27;, **fmtparams)</span></span><br><span class="line"><span class="comment"># 写入是 a list of strings</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;eggs.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    spamwriter = csv.writer(csvfile, delimiter=<span class="string">&#x27; &#x27;</span>,</span><br><span class="line">                            quotechar=<span class="string">&#x27;|&#x27;</span>, quoting=csv.QUOTE_MINIMAL)</span><br><span class="line">    spamwriter.writerow([<span class="string">&#x27;Spam&#x27;</span>] * <span class="number">5</span> + [<span class="string">&#x27;Baked Beans&#x27;</span>])</span><br><span class="line">    spamwriter.writerow([<span class="string">&#x27;Spam&#x27;</span>, <span class="string">&#x27;Lovely Spam&#x27;</span>, <span class="string">&#x27;Wonderful Spam&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>classes</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># csv.DictReader(f)</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;names.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.DictReader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row[<span class="string">&#x27;first_name&#x27;</span>], row[<span class="string">&#x27;last_name&#x27;</span>])</span><br><span class="line">print(row)</span><br><span class="line"><span class="comment"># 公开接口</span></span><br><span class="line">csvreader.__next__()  <span class="comment"># 让对象变为 iterable object，使用next(reader) </span></span><br><span class="line">csvreader.dialect  <span class="comment"># 只读</span></span><br><span class="line">csvreader.line_num <span class="comment"># 行数(包含首行目录), 这与返回的记录数不同，因为记录可以跨越多行。</span></span><br><span class="line">csvreader.fieldnames <span class="comment"># 目录（如果有，没有则是第一行）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># csv.DictWriter(f)</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;names.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)  <span class="comment"># 指定目录</span></span><br><span class="line"></span><br><span class="line">    writer.writeheader()  <span class="comment"># 写入目录</span></span><br><span class="line">    writer.writerow(&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;Baked&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Beans&#x27;</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;Lovely&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Spam&#x27;</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">&#x27;first_name&#x27;</span>: <span class="string">&#x27;Wonderful&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>: <span class="string">&#x27;Spam&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># 公开接口</span></span><br><span class="line">csvwriter.writerow(row)</span><br><span class="line">csvwriter.writerows(rows) <span class="comment"># an iterable of row objects</span></span><br><span class="line">DictWriter.writeheader()  <span class="comment"># 写入目录（必须先在构造函数中指定）。</span></span><br><span class="line">csvreader.dialect  <span class="comment"># 只读</span></span><br></pre></td></tr></table></figure>

<ul>
<li>exception</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">csv.Error</span><br><span class="line"><span class="comment"># 所有异常都是Error</span></span><br></pre></td></tr></table></figure>

<h4 id="Dialects的默认参数"><a href="#Dialects的默认参数" class="headerlink" title="Dialects的默认参数"></a>Dialects的默认参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一下参数了解，我们一般用不到，（不会去手动创建dialect对象）</span></span><br><span class="line">Dialect.delimiter</span><br><span class="line"><span class="comment"># 分隔符，默认为 &#x27;,&#x27;</span></span><br><span class="line">Dialect.lineterminator</span><br><span class="line"><span class="comment"># 换行符 defaults &#x27;\r\n&#x27;</span></span><br><span class="line">Dialect.strict</span><br><span class="line"><span class="comment"># When True, raise exception Error on bad CSV input. The default is False.</span></span><br></pre></td></tr></table></figure>

<h4 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;some.csv&#x27;</span>, newline=<span class="string">&#x27;&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="comment"># 偶尔是 encoding=&#x27;utf-8-sig&#x27; </span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csv.reader([<span class="string">&#x27;one,two,three&#x27;</span>]): <span class="comment"># 解析字符串</span></span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Firewall</title>
    <url>/notes/firewall/</url>
    <content><![CDATA[<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><h4 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure>

<h4 id="查询端口号80-是否开启"><a href="#查询端口号80-是否开启" class="headerlink" title="查询端口号80 是否开启"></a>查询端口号80 是否开启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --query-port&#x3D;80&#x2F;tcp</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="查询有哪些端口是开启的"><a href="#查询有哪些端口是开启的" class="headerlink" title="查询有哪些端口是开启的"></a>查询有哪些端口是开启的</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-port</span><br></pre></td></tr></table></figure>

<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="禁止防火墙开机自启"><a href="#禁止防火墙开机自启" class="headerlink" title="禁止防火墙开机自启"></a>禁止防火墙开机自启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="启动防火墙"><a href="#启动防火墙" class="headerlink" title="启动防火墙"></a>启动防火墙</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Func-Param</title>
    <url>/notes/func-param/</url>
    <content><![CDATA[<h4 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1.位置参数"></a>1.位置参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x</span>):</span></span><br><span class="line">	<span class="keyword">return</span> x*x</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2-默认参数"><a href="#2-默认参数" class="headerlink" title="2.默认参数"></a>2.默认参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span>(<span class="params">x=<span class="number">1</span></span>):</span></span><br><span class="line">	<span class="keyword">return</span> x*x</span><br><span class="line"><span class="comment"># 必选参数在前，默认参数在后</span></span><br><span class="line"><span class="comment"># 变化大的参数在前，变化小的参数在后</span></span><br><span class="line"><span class="comment"># 变化小的参数可以作为默认参数</span></span><br></pre></td></tr></table></figure>

<h4 id="3-可变参数"><a href="#3-可变参数" class="headerlink" title="3.可变参数"></a>3.可变参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cale</span>(<span class="params">*numbers</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line">cale(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-关键字参数"><a href="#4-关键字参数" class="headerlink" title="4.关键字参数"></a>4.关键字参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name, age, **kw</span>)</span></span><br><span class="line"><span class="function">    <span class="title">print</span>(<span class="params"><span class="string">&#x27;name:&#x27;</span>,name,<span class="string">&#x27;age:&#x27;</span>,age,<span class="string">&#x27;other&#x27;</span>,kw</span>)</span></span><br><span class="line"><span class="function"><span class="title">person</span>(<span class="params"><span class="string">&#x27;Tom&#x27;</span>, <span class="number">30</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">person</span>(<span class="params"><span class="string">&#x27;Tom&#x27;</span>, <span class="number">30</span>, city=<span class="string">&#x27;beijing&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="title">person</span>(<span class="params"><span class="string">&#x27;Tom&#x27;</span>, <span class="number">30</span>, **dict1</span>)</span></span><br></pre></td></tr></table></figure>

<h4 id="5-命名关键字参数"><a href="#5-命名关键字参数" class="headerlink" title="5.命名关键字参数"></a>5.命名关键字参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span>(<span class="params">name,age,*,city,job</span>):</span></span><br><span class="line">    <span class="comment"># 没有可变参数时</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person1</span>(<span class="params">name,age,*args,city=<span class="string">&#x27;beijing&#x27;</span>,job</span>):</span></span><br><span class="line">    <span class="comment"># 有可变参数时，不再需要特殊分隔符*</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="参数组合"><a href="#参数组合" class="headerlink" title="参数组合"></a>参数组合</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">顺序：必选参数（位置参数），默认参数，可变参数，关键字参数，命名关键字参数</span><br></pre></td></tr></table></figure>

<h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func(*args,**kw)</span><br><span class="line">对于任意函数，都可以通过类似func(*args,**kw)的形式调用它，无论它的参数是如何定义的。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Func</title>
    <url>/notes/func/</url>
    <content><![CDATA[<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">把func作用在iterator每一个元素上，并返回一个iterator</span><br></pre></td></tr></table></figure>

<h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">累积计算  # func(x,y)必须两个参数</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过滤函数 </span><br><span class="line"># 把func作用在iterator每一个元素上，然后根据返回值是Ture还是False决定保留还是丢弃该元素</span><br><span class="line"># 返回值是原来iterator的子序列</span><br></pre></td></tr></table></figure>

<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map、reduce、filter都是两个参数（第一个func，第二个iterator）</span><br><span class="line">返回值都是惰性iterator，需要list()才能转换为list</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Get-Code</title>
    <url>/notes/get-code/</url>
    <content><![CDATA[<p>这个inspect库可以获取函数的源代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>(<span class="params">arg1, arg2</span>):</span></span><br><span class="line">    <span class="comment"># do something with args</span></span><br><span class="line">    a = arg1 + arg2</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">lines = inspect.getsource(foo)</span><br><span class="line">print(lines)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-Commit-Standard</title>
    <url>/notes/git-commit-standard/</url>
    <content><![CDATA[<h4 id="git-commit规范"><a href="#git-commit规范" class="headerlink" title="git commit规范"></a>git commit规范</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">feat：新增功能</span><br><span class="line">fix：修复bug</span><br><span class="line">docs：修改文档</span><br><span class="line">refactor：代码重构，未新增任何功能和修复任何bug</span><br><span class="line">build：改变构建流程，新增依赖库、工具</span><br><span class="line">style：仅仅修改了空格、缩进等，不改变代码逻辑</span><br><span class="line">perf：改善性能和体现的修改</span><br><span class="line">chore：非src和test的修改</span><br><span class="line">test：测试用例的修改</span><br><span class="line">ci：自动化流程配置修改</span><br><span class="line">revert：回滚到上一个版本</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/notes/git/</url>
    <content><![CDATA[<h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><h4 id="查看不同"><a href="#查看不同" class="headerlink" title="查看不同"></a>查看不同</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<h4 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^ </span><br><span class="line"><span class="meta">#</span><span class="bash"> HEAD 表示当前版本，^和^^, 或者直接是版本id号</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard 1094a</span><br><span class="line"><span class="meta">#</span><span class="bash"> git reset --hard commit_id</span></span><br></pre></td></tr></table></figure>

<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log [--pretty=oneline]</span><br><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">log</span> --graph命令可以看到分支合并图</span></span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>

<h4 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h4 id="查看工作区和版本库里面最新版本的区别"><a href="#查看工作区和版本库里面最新版本的区别" class="headerlink" title="查看工作区和版本库里面最新版本的区别"></a>查看工作区和版本库里面最新版本的区别</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git diff HEAD -- readme.txt</span><br></pre></td></tr></table></figure>

<h4 id="丢弃修改"><a href="#丢弃修改" class="headerlink" title="丢弃修改"></a>丢弃修改</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> git checkout -- file</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只能丢弃未add的</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果已经add了，则需要使用git reset HEAD &lt;file&gt;命令，再调用git checkout -- readme.txt</span></span><br><span class="line">git reset HEAD readme.txt # 撤销add的文件</span><br><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure>

<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先删除文件，再使用命令删除版本库里面的文件，并且再commit</span></span><br><span class="line">git rm test.txt</span><br><span class="line">git commit -m &quot;remove test.txt&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果误删则git checkout -- test.txt还原</span></span><br><span class="line">git checkout -- test.txt</span><br></pre></td></tr></table></figure>

<h4 id="关联仓库"><a href="#关联仓库" class="headerlink" title="关联仓库"></a>关联仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin &quot;url&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把本地库的所有内容推送到远程库上</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span></span><br></pre></td></tr></table></figure>

<h4 id="推送代码"><a href="#推送代码" class="headerlink" title="推送代码"></a>推送代码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br><span class="line"><span class="meta">#</span><span class="bash"> master 是仓库</span></span><br></pre></td></tr></table></figure>

<h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建+切换分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout &lt;name&gt;</span><br></pre></td></tr></table></figure>

<h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 会列出所有分支，当前分支前面会标一个*号</span></span><br><span class="line">git branch</span><br></pre></td></tr></table></figure>

<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 分支走在了主分支前面，并没有变成两个不同分支</span></span><br><span class="line">git merge dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> Fast-forward <span class="string">&quot;快进模式&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换回主分支，再合并（重点理解为什么）</span></span><br></pre></td></tr></table></figure>

<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d dev # 和查看当前分支相同</span><br><span class="line">git branch -D feature-vulcan # 强制删除未合并的分支</span><br></pre></td></tr></table></figure>

<h4 id="禁用Fast-forward-：”快进模式”"><a href="#禁用Fast-forward-：”快进模式”" class="headerlink" title="禁用Fast-forward ：”快进模式”"></a>禁用Fast-forward ：”快进模式”</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</span></span><br></pre></td></tr></table></figure>

<h4 id="保存现场"><a href="#保存现场" class="headerlink" title="保存现场"></a>保存现场</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看保存的现场</span></span><br><span class="line">git stash list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复现场方法一</span></span><br><span class="line">git stash apply</span><br><span class="line">git stash drop</span><br><span class="line">git stash apply stash@&#123;0&#125; # 好像没什么区别</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复现场方法二</span></span><br><span class="line">git stash pop # 常用</span><br></pre></td></tr></table></figure>

<h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote [-v]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加上-v，信息更详细</span></span><br></pre></td></tr></table></figure>

<h4 id="分支推送原则"><a href="#分支推送原则" class="headerlink" title="分支推送原则"></a>分支推送原则</h4><ul>
<li><code>master</code>分支是主分支，因此要时刻与远程同步；</li>
<li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li><code>feature</code>分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<h4 id="拷贝远程分支到本地（远程合作常用）"><a href="#拷贝远程分支到本地（远程合作常用）" class="headerlink" title="拷贝远程分支到本地（远程合作常用）"></a>拷贝远程分支到本地（远程合作常用）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置dev和origin/dev的链接</span></span><br><span class="line">git branch --set-upstream-to=origin/dev dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</span></span><br><span class="line">git pull # 下载更新 </span><br></pre></td></tr></table></figure>

<h4 id="特殊命令（多人合作）"><a href="#特殊命令（多人合作）" class="headerlink" title="特殊命令（多人合作）"></a>特殊命令（多人合作）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rebase</span><br><span class="line"><span class="meta">#</span><span class="bash"> rebase操作可以把本地未push的分叉提交历史整理成直线；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</span></span><br></pre></td></tr></table></figure>

<h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> git tag &lt;name&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="对commit打标签"><a href="#对commit打标签" class="headerlink" title="对commit打标签"></a>对commit打标签</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag v0.9 f52c633  # id号</span><br></pre></td></tr></table></figure>

<h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag # 查看标签</span><br><span class="line">git show v0.9  # git show &lt;tagname&gt;查看标签信息</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意，标签不是按时间顺序列出，而是按字母排序的。</span></span><br><span class="line"></span><br><span class="line">git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签</span></span><br></pre></td></tr></table></figure>

<h4 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除标签</span></span><br><span class="line">git tag -d v0.1  # 命令git tag -d &lt;tagname&gt;可以删除一个本地标签；</span><br><span class="line"><span class="meta">#</span><span class="bash"> git push origin &lt;tagname&gt; 推送标签到远程库</span></span><br><span class="line">git push origin v1.0 # 某一个</span><br><span class="line">git push origin --tags  # 所有标签</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除</span></span><br><span class="line">git tag -d v0.9</span><br><span class="line">git push origin :refs/tags/v0.9</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。</span></span><br></pre></td></tr></table></figure>

<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .gitignore文件（不想被git提示的，文件名写入其中即可）</span></span><br><span class="line">git check-ignore # 查找错误规则</span><br><span class="line">git add -f App.class # 强制添加</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 别名</span></span><br><span class="line">git config --global alias.st status # git status改为git st (即status改为st)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 丧心病狂</span></span><br><span class="line">git config --global alias.lg &quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置文件cat .git/config ,直接修改[<span class="built_in">alias</span>]即可还原</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Html</title>
    <url>/notes/html/</url>
    <content><![CDATA[<h4 id="HTML笔记"><a href="#HTML笔记" class="headerlink" title="HTML笔记"></a>HTML笔记</h4><p><a href="https://blog.csdn.net/weixin_43342105/article/details/106271856">HTML复习笔记</a></p>
<h4 id="一、基础概念："><a href="#一、基础概念：" class="headerlink" title="一、基础概念："></a>一、基础概念：</h4><ul>
<li>HTML：理解HTML是超文本标记语言，是使用标签(HTML tag)来描述网页</li>
<li>标签：标签是由<em>尖括号</em>包围的关键词，通常是<em>成对出现</em>，对大小写<em>不敏感</em></li>
<li>html文档等价于网页，由html标签和纯文本组成</li>
<li>元素：指的是从开始标签到结束标签的所有代码</li>
<li>属性：在开始标签中以key=value的形式存在</li>
</ul>
<a id="more"></a>

<h4 id="二、常用标签"><a href="#二、常用标签" class="headerlink" title="二、常用标签"></a>二、常用标签</h4><ul>
<li>需要熟悉常用标签，及标签的常用属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">标题<span class="tag">&lt;<span class="name">h1</span>&gt;</span>-<span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br><span class="line">段落<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">链接<span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">图像<span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br><span class="line">换行<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">水平线<span class="tag">&lt;<span class="name">hr</span>/&gt;</span> </span><br><span class="line">块<span class="tag">&lt;<span class="name">div</span>&gt;</span>和<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">框架<span class="tag">&lt;<span class="name">frameset</span>&gt;</span>和<span class="tag">&lt;<span class="name">frame</span>&gt;</span></span><br><span class="line">内联框架<span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line">头<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">样式<span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">脚本<span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">链接资源<span class="tag">&lt;<span class="name">link</span>&gt;</span></span></span><br><span class="line"><span class="xml">元数据<span class="tag">&lt;<span class="name">meta</span>&gt;</span></span></span><br><span class="line"><span class="xml">表单<span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<!--这是一段注释。注释不会在浏览器中显示。-->

<h4 id="三、常用属性"><a href="#三、常用属性" class="headerlink" title="三、常用属性"></a>三、常用属性</h4><ul>
<li><p>属性和属性值对大小写<em>不敏感</em></p>
</li>
<li><p>属性值需要加引号</p>
</li>
<li><p>多使用手册查属性</p>
</li>
</ul>
<h4 id="四、常用样式"><a href="#四、常用样式" class="headerlink" title="四、常用样式"></a>四、常用样式</h4><ul>
<li>用于改变 HTML 元素的样式</li>
<li>style=”background-color:red”</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># 使用样式的三种方法</span><br><span class="line"># 方法1:外部样式表</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyle.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"># 方法2:内部样式表</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: red&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">p</span> &#123;<span class="attribute">margin-left</span>: <span class="number">20px</span>&#125;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"># 方法3：内联样式</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; margin-left: 20px&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>标签、属性、颜色、实体</p>
<h4 id="五、RWD"><a href="#五、RWD" class="headerlink" title="五、RWD"></a>五、RWD</h4><ul>
<li>RWD 指的是响应式 Web 设计（Responsive Web Design）</li>
<li>RWD 能够以可变尺寸传递网页</li>
</ul>
<h4 id="六、字符实体"><a href="#六、字符实体" class="headerlink" title="六、字符实体"></a>六、字符实体</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">空格 <span class="symbol">&amp;nbsp;</span> 或者 <span class="symbol">&amp;#160;</span></span><br></pre></td></tr></table></figure>

<h4 id="七、URL"><a href="#七、URL" class="headerlink" title="七、URL"></a>七、URL</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scheme:&#x2F;&#x2F;host.domain:port&#x2F;path&#x2F;filename</span><br></pre></td></tr></table></figure>

<h4 id="八、声明"><a href="#八、声明" class="headerlink" title="八、声明"></a>八、声明</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h4><ul>
<li>支持在网页上绘制图形</li>
<li>网页支持SVG矢量图</li>
<li>网页支持音效、音乐、视频和动画</li>
<li>支持地理定位</li>
<li>支持拖放</li>
<li>支持本地存储</li>
<li>支持应用缓存，离线浏览</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Import-Package</title>
    <url>/notes/import-package/</url>
    <content><![CDATA[<h1 id="import异常"><a href="#import异常" class="headerlink" title="import异常"></a>import异常</h1><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>导入其他包里的模块，当在项目外执行run.py文件的时候，会出现找不到模块路径</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>将项目根目录加入到Python 解释器搜索路径里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line">project_dir = os.path.abspath(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line">sys.path.append(project)</span><br><span class="line"><span class="comment"># os.path.abspath(__file__) 是获取本文件的绝对路径</span></span><br><span class="line"><span class="comment"># os.path.dirname() 返回路径字符串的目录部分</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Develop</tag>
      </tags>
  </entry>
  <entry>
    <title>Init-css.css</title>
    <url>/notes/init-css-css/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*把我们所有标签的内外边距清零*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* em 和 i 斜体的文字不倾斜 */</span></span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去掉li 的小圆点 */</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* border 0 照顾低版本浏览器 如果 图片外面包含了链接会有边框的问题 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 取消图片底侧有空白缝隙的问题 */</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="comment">/* 当我们鼠标经过button 按钮的时候，鼠标变成小手 */</span></span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c81623</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="comment">/* &quot;\5B8B\4F53&quot; 就是宋体的意思 这样浏览器兼容性比较好 */</span></span><br><span class="line">    <span class="attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS3 抗锯齿形 让文字显示的更加清晰 */</span></span><br><span class="line">    <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hide</span>,</span><br><span class="line"><span class="selector-class">.none</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Job-Knowledge</title>
    <url>/notes/job-knowledge/</url>
    <content><![CDATA[<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>需要学习的一些知识点的总结</li>
<li>主要是技术上知识点，框架之类的</li>
</ul>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多熟悉Python-面向对象编程</span><br><span class="line">熟悉常用函数库</span><br><span class="line">Xpath</span><br><span class="line">正则表达式</span><br><span class="line">Scrapy</span><br><span class="line">scrapyd</span><br><span class="line">Scrapy-redis</span><br><span class="line">Pyspider</span><br><span class="line">CSS提取</span><br><span class="line">JS逆向</span><br><span class="line">Mysql</span><br><span class="line">Redis</span><br><span class="line">Mongodb</span><br><span class="line">Linux-centos7</span><br><span class="line">HTTP协议</span><br><span class="line">selenium</span><br><span class="line">日志系统logging</span><br><span class="line">分布式爬虫系统设计</span><br><span class="line">防屏蔽：IP代理池（vps和免费代理池）</span><br><span class="line">防屏蔽：cookie池</span><br><span class="line">防屏蔽：验证码问题</span><br><span class="line">软件工程设计</span><br><span class="line">Kafka</span><br><span class="line">docker</span><br><span class="line">flask</span><br><span class="line">django</span><br></pre></td></tr></table></figure>

<p>数据存储相关操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jsonlines</span><br><span class="line">csv</span><br><span class="line">mongodb</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Expansion</category>
      </categories>
      <tags>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali-Wifi</title>
    <url>/notes/kali-wifi/</url>
    <content><![CDATA[<h4 id="暴力破解wifi，获取wifi密码"><a href="#暴力破解wifi，获取wifi密码" class="headerlink" title="暴力破解wifi，获取wifi密码"></a>暴力破解wifi，获取wifi密码</h4><p>嘿嘿，wifi密码在我手上</p>
<p>使用kail抓取wifi握手包🤝，然后枚举密码，并验证，得出密码</p>
<a id="more"></a>



<img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201024100509.png" alt="image-20201024100509256" style="zoom:50%;" />]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Kill-Process</title>
    <url>/notes/kill-process/</url>
    <content><![CDATA[<h3 id="杀死占用端口的进程"><a href="#杀死占用端口的进程" class="headerlink" title="杀死占用端口的进程"></a>杀死占用端口的进程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看占用端口的进程</span></span><br><span class="line">netstat -tlnp|grep 6379  # t-tcp,l-listen,n-不解析(速度快),p-process</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一次性的清除占用80端口的程序</span></span><br><span class="line">lsof -i :80|grep -v &quot;PID&quot;|awk &#x27;&#123;print &quot;kill -9&quot;,$2&#125;&#x27;|sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 终止进程</span></span><br><span class="line">kill 5014</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制终止进程</span></span><br><span class="line">kill -9 5014  # 是pid</span><br></pre></td></tr></table></figure>

<a id="more"></a>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Linux</tag>
        <tag>Develop</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Basics</title>
    <url>/notes/linux-basics/</url>
    <content><![CDATA[<h4 id="Linux笔记"><a href="#Linux笔记" class="headerlink" title="Linux笔记"></a>Linux笔记</h4><a id="more"></a>

<h5 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1.添加用户</span><br><span class="line">useradd xm</span><br><span class="line">useradd -d &#x2F;home&#x2F;xm xm  # 指定家目录</span><br><span class="line">useradd -g gxm xm  # 指定用户组gxm</span><br><span class="line"># 2.密码</span><br><span class="line">passwd xm</span><br><span class="line"># 3.删除用户</span><br><span class="line">userdel xm</span><br><span class="line">userdel -r xm  # 删除家目录</span><br><span class="line"># 4.查询用户信息</span><br><span class="line">id xm</span><br><span class="line"># 5.切换用户</span><br><span class="line">su xm</span><br><span class="line">exit  # 退回原来的用户</span><br><span class="line"># 6.修改用户的组</span><br><span class="line">usermod -g gxm xm</span><br><span class="line"># 7.修改用户家目录</span><br><span class="line">usermod -d &#x2F;home&#x2F;xm xm</span><br></pre></td></tr></table></figure>

<h5 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1.添加用户组</span><br><span class="line">groupadd xm</span><br><span class="line"># 2.删除用户组</span><br><span class="line">groupdel xm</span><br></pre></td></tr></table></figure>

<h5 id="用户相关文件"><a href="#用户相关文件" class="headerlink" title="用户相关文件"></a>用户相关文件</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 用户的配置文件，记录用户的各种信息（用户名，用户id，组id，家目录，shell）</span><br><span class="line">&#x2F;etc&#x2F;passwd</span><br><span class="line"># 密码的配置文件（登录名:加密口令:最后修改时间:最小间隔:最大间隔:警告时间:不活动时间:失效时间:标志）</span><br><span class="line">&#x2F;etc&#x2F;shadow</span><br><span class="line"># 组的配置文件（组名，组id）</span><br><span class="line">&#x2F;etc&#x2F;group</span><br></pre></td></tr></table></figure>

<h5 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown xm a.txt  # 修改所属用户 </span><br><span class="line">chgrp gxm a.txt  # 修改所属组</span><br><span class="line">chown xm:gxm a.txt  # 同时修改（特殊用法）</span><br><span class="line">-R  递归生效</span><br><span class="line"># 修改文件权限 u g o a 可以 +- rwx</span><br><span class="line">chmod o-x a.txt</span><br><span class="line">chmod 421 a.txt # r-- -w- --x</span><br></pre></td></tr></table></figure>

<h5 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/crontab  <span class="comment"># 服务名为 crond  </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl restart crond</span></span><br><span class="line">crontab  </span><br><span class="line">-e 编辑  # 格式*/1 8,12 * * 0-7 ll /root &gt;&gt; /root/to.log  # *和,和-和*/n</span><br><span class="line">        # 格式 * * * * * /home/mytask1.sh # 直接跟shell脚本 # 要注意执行权限</span><br><span class="line">-l 查询</span><br><span class="line">-r 删除当前用户所有的crontab任务</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Test</title>
    <url>/notes/linux-test/</url>
    <content><![CDATA[<p>Linux试题笔记</p>
<hr>
<p><img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201223114914.png" alt="image-20201223114914637"></p>
<hr>
<p><img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201228163615.png" alt="image-20201228163615713"></p>
<hr>
 <a id="more"></a>

<p><img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201228164022.png" alt="image-20201228164022467"></p>
<hr>
<p><img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201228164329.png" alt="image-20201228164329162"></p>
<hr>
<p>1、Linux文件权限一共10位长度，分成四段,每段的含义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux用户分为：拥有者、组群(Group)、其他（other）</span><br><span class="line">linux中的文件属性过分四段，如  -rwzrwz---</span><br><span class="line">第一段  -  是指文件类型 表示这是个普通文件</span><br><span class="line">文件类型部分</span><br><span class="line">-：文件</span><br><span class="line">d：文件夹</span><br><span class="line">l：链接文件，可以理解为 windows中的快捷方式（link file）</span><br><span class="line">b：供存储周边设备</span><br><span class="line">c：一次性读取装置</span><br><span class="line"> </span><br><span class="line">第二段  rwz  是指拥有者具有可读可写可执行的权限  </span><br><span class="line">类似于windows中的所有者权限比如 administrator 对文件具有 修改、读取和执行权限</span><br><span class="line"> </span><br><span class="line">第三段  rwz 是指所属于这个组的成员对于这个文件具有，可读可写可执行的权限      </span><br><span class="line">类似于windows中的组权限比如administrators组，属于这个组的成员对于文件的都有 可读可写可执行权限</span><br><span class="line"> </span><br><span class="line">第四段  --- 是指其他人对于这个文件没有任何权限</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Logging</title>
    <url>/notes/logging/</url>
    <content><![CDATA[<h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.debug(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;Hello&quot;</span>) <span class="comment"># 默认</span></span><br><span class="line">logging.error(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="控制级别"><a href="#控制级别" class="headerlink" title="控制级别"></a>控制级别</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.NOTSET)  <span class="comment"># 设置日志级别</span></span><br></pre></td></tr></table></figure>

<h4 id="控制日志格式"><a href="#控制日志格式" class="headerlink" title="控制日志格式"></a>控制日志格式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">             <span class="built_in">format</span>=<span class="string">&#x27;[%(levelname)s][%(asctime)s][%(filename)s][%(message)s]&#x27;</span>)</span><br><span class="line"><span class="comment"># 推荐格式&#x27;[%(levelname)s][%(asctime)s][%(filename)s][%(message)s]&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="基本操作流程（经典案例）"><a href="#基本操作流程（经典案例）" class="headerlink" title="基本操作流程（经典案例）"></a>基本操作流程（经典案例）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.DEBUG)  <span class="comment"># 设置为最低</span></span><br><span class="line"></span><br><span class="line">log_dir = os.path.join(os.getcwd(), <span class="string">&#x27;Logs&#x27;</span>)</span><br><span class="line">log_file = os.path.join(log_dir, <span class="string">&#x27;spider_error.log&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">    os.mkdir(log_dir)</span><br><span class="line"></span><br><span class="line">file_handler = logging.FileHandler(log_file, mode=<span class="string">&#x27;a&#x27;</span>)  <span class="comment"># 日志文件</span></span><br><span class="line">file_handler.setLevel(logging.ERROR)</span><br><span class="line">file_handler.setFormatter(logging.Formatter(<span class="string">&#x27;[%(levelname)s][%(asctime)s][%(message)s]&#x27;</span>))</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">console_handler = logging.StreamHandler()  <span class="comment"># 控制台</span></span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line">console_handler.setFormatter(logging.Formatter(<span class="string">&#x27;[%(levelname)s][%(asctime)s][%(message)s]&#x27;</span>))</span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line"><span class="comment"># 所有日志都到logger里面,需要输出到哪里，就过滤，拷贝到哪里。</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/CJOKER/p/8295272.html">logging参考连接</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkupSafe-Error</title>
    <url>/notes/markupsafe-error/</url>
    <content><![CDATA[<p>python3 pip安装MarkupSafe==1.0失败解决过程</p>
<p>解决办法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip setuptools&#x3D;&#x3D;45.2.0</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

<p>报错异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collecting MarkupSafe&#x3D;&#x3D;1.0</span><br><span class="line">  Downloading MarkupSafe-1.0.tar.gz (14 kB)</span><br><span class="line">    ERROR: Command errored out with exit status 1:</span><br><span class="line">     command: &#x2F;opt&#x2F;py3&#x2F;bin&#x2F;python3.6 -c &#39;import sys, setuptools, tokenize; sys.argv[0] &#x3D; &#39;&quot;&#39;&quot;&#39;&#x2F;tmp&#x2F;pip-install-10jh3ic4&#x2F;MarkupSafe&#x2F;setup.py&#39;&quot;&#39;&quot;&#39;; __file__&#x3D;&#39;&quot;&#39;&quot;&#39;&#x2F;tmp&#x2F;pip-install-10jh3ic4&#x2F;MarkupSafe&#x2F;setup.py&#39;&quot;&#39;&quot;&#39;;f&#x3D;getattr(tokenize, &#39;&quot;&#39;&quot;&#39;open&#39;&quot;&#39;&quot;&#39;, open)(__file__);code&#x3D;f.read().replace(&#39;&quot;&#39;&quot;&#39;\r\n&#39;&quot;&#39;&quot;&#39;, &#39;&quot;&#39;&quot;&#39;\n&#39;&quot;&#39;&quot;&#39;);f.close();exec(compile(code, __file__, &#39;&quot;&#39;&quot;&#39;exec&#39;&quot;&#39;&quot;&#39;))&#39; egg_info --egg-base &#x2F;tmp&#x2F;pip-install-10jh3ic4&#x2F;MarkupSafe&#x2F;pip-egg-info</span><br><span class="line">         cwd: &#x2F;tmp&#x2F;pip-install-10jh3ic4&#x2F;MarkupSafe&#x2F;</span><br><span class="line">    Complete output (5 lines):</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">      File &quot;&#x2F;tmp&#x2F;pip-install-10jh3ic4&#x2F;MarkupSafe&#x2F;setup.py&quot;, line 6, in &lt;module&gt;</span><br><span class="line">        from setuptools import setup, Extension, Feature</span><br><span class="line">    ImportError: cannot import name &#39;Feature&#39;</span><br><span class="line">    ----------------------------------------</span><br><span class="line">ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>ERROR</tag>
      </tags>
  </entry>
  <entry>
    <title>Match-Zh</title>
    <url>/notes/match-zh/</url>
    <content><![CDATA[<h3 id="正则匹配中文"><a href="#正则匹配中文" class="headerlink" title="正则匹配中文"></a>正则匹配中文</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">title &#x3D; &#39;你好，hello，世界&#39;</span><br><span class="line">pattern &#x3D; re.compile(r&#39;[\u4e00-\u9fa5]+&#39;)</span><br><span class="line">result &#x3D; pattern.findall(title)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Re</tag>
      </tags>
  </entry>
  <entry>
    <title>Module</title>
    <url>/notes/module/</url>
    <content><![CDATA[<h3 id="模块搜索路径"><a href="#模块搜索路径" class="headerlink" title="模块搜索路径"></a>模块搜索路径</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;模块路径&#x27;</span>)</span><br><span class="line"><span class="comment"># 这种方法是在运行时修改（添加），运行结束后失效</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="介绍模块相关一些知识"><a href="#介绍模块相关一些知识" class="headerlink" title="介绍模块相关一些知识"></a>介绍模块相关一些知识</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; a test module &#x27;</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">&#x27;Jason &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    args = sys.argv   <span class="comment"># 命令行参数，第一个默认为文件名</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(args)==<span class="number">1</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello, world!&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(args)==<span class="number">2</span>:</span><br><span class="line">        print(<span class="string">&#x27;Hello, %s!&#x27;</span> % args[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;Too many arguments!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">可以让文件直接在Unix/Linux/Mac上运行</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">统一使用标准utf-8编码</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">任何模块代码的第一个字符串都被视为模块的文档注释</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__author__变量是作者</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-css.css</title>
    <url>/notes/notes-css-css/</url>
    <content><![CDATA[<p>CSS笔记</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*一、基础选择器*/</span></span><br><span class="line"><span class="comment">/*1.1 标签选择器*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.2 类选择器*/</span></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.3 id选择器*/</span></span><br><span class="line"><span class="selector-id">#pink</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.4 通配符选择器*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二、字体属性*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/*字体系列*/</span></span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>, Arial, Helvetica, sans-serif;</span><br><span class="line">    <span class="comment">/*字体大小*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="comment">/*字体粗细 400和700*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">    <span class="comment">/*文字样式 normal不倾斜 italic倾斜 */</span></span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">    <span class="comment">/* 复合属性: 简写的方式  节约代码 */</span></span><br><span class="line">    <span class="comment">/* font: font-style  font-weight  font-size/line-height  font-family; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三、文本外观*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/*颜色*/</span></span><br><span class="line">    <span class="comment">/* color: #cc00ff; */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="comment">/*文本对齐 left、center、right*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">    <span class="comment">/*装饰文本 underline下划线 overline上划线 line-through穿过文本 blink闪烁 inherit继承父类 none取消装饰*/</span></span><br><span class="line">    <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">    <span class="comment">/*文本缩进 em或者px */</span></span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="comment">/*行间距*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*四、emmet语法*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*五、复合选择器*/</span></span><br><span class="line"><span class="comment">/*5.1 后代选择器*/</span></span><br><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*5.2 子元素选择器*/</span></span><br><span class="line"><span class="selector-class">.nav</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*5.3 并集选择器*/</span></span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-class">.pig</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*5.4 链接伪类选择器*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123; <span class="comment">/* 1.未访问的链接 a:link  把没有点击过的(访问过的)链接选出来 (开发常用)*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="comment">/*2. a:visited 选择点击过的(访问过的)链接 */</span></span><br><span class="line">    <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="comment">/*3. a:hover 选择鼠标经过的那个链接 (开发常用)*/</span></span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123; <span class="comment">/* 4. a:active 选择的是我们鼠标正在按下还没有弹起鼠标的那个链接 */</span></span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*5.5 focus伪类选择器*/</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123; <span class="comment">/* 把获得光标的input表单元素选取出来 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*六、元素显示模式切换 块级元素block、行内元素inline、行内块元素inline-block 不显示none*/</span></span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">span</span>,</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*七、背景*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="comment">/*背景颜色 透明transparent*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">/*背景图片*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(http://www.itcast.cn/<span class="number">2018</span>czgw/images/logo.png);</span><br><span class="line">    <span class="comment">/*背景图片平铺 不平铺no-repeat 平铺的repeat 沿着x轴平铺repeat-x 沿着Y轴平铺repeat-y */</span></span><br><span class="line">    <span class="attribute">background-repeat</span>: repeat-y;</span><br><span class="line">    <span class="comment">/*背景位置 left top right bottom center 也可40px */</span></span><br><span class="line">    <span class="attribute">background-position</span>: top;</span><br><span class="line">    <span class="comment">/*把背景图片固定住*/</span></span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="comment">/*复合写法*/</span></span><br><span class="line">    <span class="comment">/*background: black url(images/bg.jpg) no-repeat fixed center top;*/</span></span><br><span class="line">    <span class="comment">/*背景色透明写法*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*八、css三大特性: 层叠性、继承性、优先级*/</span></span><br><span class="line"><span class="comment">/*8.1、权重</span></span><br><span class="line"><span class="comment">行内样式1000</span></span><br><span class="line"><span class="comment">   id是0100</span></span><br><span class="line"><span class="comment">   类是0010</span></span><br><span class="line"><span class="comment"> 标签是0001</span></span><br><span class="line"><span class="comment"> 继承是0000</span></span><br><span class="line"><span class="comment">   *是0000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*8.2 权重叠加 权重虽然会叠加,但是永远不会有进位*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*九、盒子模型*/</span></span><br><span class="line"><span class="comment">/*9.1 边框*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/* border-width 边框的粗细  一般情况下都用 px */</span></span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="comment">/* border-style 边框的样式  solid 实线边框   dashed 虚线边框  dotted 点线边框*/</span></span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="comment">/* border-color 边框的颜色  */</span></span><br><span class="line">    <span class="attribute">border-color</span>: pink;</span><br><span class="line">    <span class="comment">/* 边框的复合写法 简写:  */</span></span><br><span class="line">    <span class="comment">/*border: 5px solid pink;*/</span></span><br><span class="line">    <span class="comment">/* 上边框 */</span></span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">    <span class="comment">/* 下边框 */</span></span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">10px</span> dashed purple;</span><br><span class="line">    <span class="comment">/* 左边框 */</span></span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> dashed purple;</span><br><span class="line">    <span class="comment">/* 右边框 */</span></span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> dashed purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.2 合并相邻的边框 */</span></span><br><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">td</span>, <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse; <span class="comment">/* 合并相邻的边框 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.3 边框会影响盒子的实际大小*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.4 内边距*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">/* 内边距复合写法(简写) */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="comment">/*padding-left: 5px;*/</span></span><br><span class="line">    <span class="comment">/*padding-top: 5px;*/</span></span><br><span class="line">    <span class="comment">/*padding-bottom: 5px;*/</span></span><br><span class="line">    <span class="comment">/*padding-right: 5px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.5 内边距会影响盒子实际大小*/</span></span><br><span class="line"><span class="comment">/*指定width,再给padding,盒子会变大。解决方法：width减去增加的左右padding值。*/</span></span><br><span class="line"><span class="comment">/*没有width,padding-left/right,盒子就不会撑大。(块元素会继承父亲的盒子大小,只要没有写明width就不会撑大！！！)*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.6 外边距*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/*margin-top: 20px;*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.7 块级盒子水平居中对齐*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">/*块级盒子水平居中对齐 使用auto*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.8 行内元素或者行内块元素水平居中给其父元素添加 text-align:center 即可 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.9 外边距合并-相邻块级元素垂直外边距合并 &lt;重点是垂直方向&gt;</span></span><br><span class="line"><span class="comment">在“标准文档流中” 通过 margin 定义块元素的垂直外边距时,可能会出现外边距的合并现象；</span></span><br><span class="line"><span class="comment">合并的情况有两种:</span></span><br><span class="line"><span class="comment">一种是相邻块元素垂直外边距的合并 -&gt; 解决办法：可以给其中的一个元素设置垂直方向上的 margin 值来解决这种问题</span></span><br><span class="line"><span class="comment">另一种是嵌套块元素垂直外边距的合并 -&gt; 解决办法：为父元素设置上边框；为父元素设置上内边距；为父元素设置 overflow:hidden 样式属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*9.10 清除内外边距*/</span></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*十、去掉li前面的小圆点*/</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*十一、圆角边框*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/*border-radius: 10px;*/</span></span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* border-radius: 10px 20px 30px 40px; */</span></span><br><span class="line">    <span class="comment">/* border-radius: 10px 40px; */</span></span><br><span class="line">    <span class="comment">/*border-top-left-radius: 20px;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*十二、盒子阴影*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123; <span class="comment">/* 原先盒子没有影子,当我们鼠标经过盒子就添加阴影效果 */</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*十三、文字阴影*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*十四、浮动 左浮动left 右浮动right 不浮动none */</span></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*十五、浮动特性*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、脱离标</span></span><br><span class="line"><span class="comment">2、浮动盒子一行显示 只能横向浮动,不能纵向浮动</span></span><br><span class="line"><span class="comment">3、浮动元素具有行内块元素特点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*十六、浮动技巧*/</span></span><br><span class="line"><span class="comment">/*浮动元素搭配标准流父盒子*/</span></span><br><span class="line"><span class="comment">/*如果一个子元素浮动了,尽量其他盒子也浮动,这样保证这些子元素一行显示*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*十七、清除浮动*/</span></span><br><span class="line"><span class="comment">/*17.1 额外标签法*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在父盒子里面,所有浮动后面加入div,必须是块级元素不能是行内元素</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*17.2 父级添加overflow属性, 不能有溢出*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/* 清除浮动 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 17.3 伪元素清除浮动 父级添加after属性 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;clearfix&quot;&gt;父元素&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="comment">/* IE6、7 专有 */</span></span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 17.4 父级添加双伪属性-推荐 */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;div class=&quot;clearfix&quot;&gt;父元素&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*十八、CSS书写规范 属性书写顺序*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、布局定位属性 display第一写</span></span><br><span class="line"><span class="comment">2、自身属性</span></span><br><span class="line"><span class="comment">3、文本属性</span></span><br><span class="line"><span class="comment">4、其他属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*十九、四种定位 子绝父相 */</span></span><br><span class="line"><span class="comment">/*19.1 定位 = 定位模式 + 边偏移*/</span></span><br><span class="line"><span class="comment">/*19.2 静态定位static 相对定位relative 绝对定位absolute 固定定位fixed*/</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="comment">/*边偏移 专属于定位*/</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.3 相对定位 相对于自身定位 不脱标*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.4 绝对定位 相对于祖先元素定位 脱标 飘的比浮动高 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.5 固定定位 相对可视化窗口定位 脱标 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.6 固定定位小技巧 固定到版心右侧*/</span></span><br><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="comment">/* 1. 走浏览器宽度的一半 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* 2. 利用margin 走版心盒子宽度的一半距离 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">405px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.7 粘性定位(了解) sticky 兼容性很差 IE不支持*/</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="comment">/* 粘性定位 */</span></span><br><span class="line">    <span class="attribute">position</span>: sticky;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="comment">/*必须添加top、left、right、bottom其中一个才有效*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.8 定位叠放顺序 */</span></span><br><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>; <span class="comment">/*可以为正整数、负整数、0 只有定位的盒子才有此属性*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.9 技巧 绝对定位水平垂直居中*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/* 1. left 走 50%  父容器宽度的一半 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* 2. margin 负值 往左边走 自己盒子宽度的一半 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*19.10 定位的特殊特性*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、行内元素添加绝对定位或者固定定位,可以直接设置高度和宽度</span></span><br><span class="line"><span class="comment">2、块级元素添加绝对或者固定定位,如果不给宽度或者高度,默认大小是内容的大小</span></span><br><span class="line"><span class="comment">3、脱标的盒子不会触发外边距塌陷</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十、显示与隐藏*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none; <span class="comment">/*隐藏后不占有原来的位置,但还在html中 常用*/</span></span><br><span class="line">    <span class="attribute">visibility</span>: visible; <span class="comment">/*继续占有原来位置 隐藏hidden 显示visible*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden; <span class="comment">/*只针对溢出的部分 显示visible 修剪hidden 滚动条scroll 滚动条auto 继承inherit */</span></span><br><span class="line">    <span class="comment">/*如果有定位的盒子,谨慎使用overflow: hidden; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十一、精灵图*/</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span><br><span class="line">    <span class="comment">/*设置宽高+指定背景位置*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(http://www.itcast.cn/<span class="number">2018</span>czgw/images/logo.png) no-repeat -<span class="number">182px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十二、字体图标*/</span></span><br><span class="line"><span class="comment">/*22.1 字体图标的下载+引入*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下载网址有 https://icomoon.io/ 和 https://www.iconfont.cn/</span></span><br><span class="line"><span class="comment">选择图标 -&gt; 下载代码 -&gt; 解压到项目根目录 -&gt; 引入iconfont.css文件</span></span><br><span class="line"><span class="comment">&lt;link rel=&quot;stylesheet&quot; href=&quot;font/iconfont.css&quot;&gt;</span></span><br><span class="line"><span class="comment">然后在demo.html中找合适的字体图标的代码即可,使用字体图标的标签需要添加 class=&quot;iconfont&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*22.2 字体图标的追加*/</span></span><br><span class="line"><span class="comment">/*寻找iconfont.json或者selection.json上传重新下载即可*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十三、CSS三角制作*/</span></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">    <span class="comment">/*先设为宽高为0*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*设置四边为透明*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">    <span class="comment">/*设置一条边颜色*/</span></span><br><span class="line">    <span class="attribute">border-left-color</span>: pink;</span><br><span class="line">    <span class="comment">/* 为了照顾兼容性 */</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十四、用户界面样式*/</span></span><br><span class="line"><span class="comment">/*24.1 表单*/</span></span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="comment">/* 取消表单轮廓 */</span></span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="comment">/* 防止拖拽文本域 */</span></span><br><span class="line">    <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*24.2 鼠标样式*/</span></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="comment">/*默认default 小手pointer 移动move 文本text 禁止not-allowed*/</span></span><br><span class="line">    <span class="attribute">cursor</span>: default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十五、vertical-align的使用*/</span></span><br><span class="line"><span class="comment">/* 设置元素的垂直对齐方式,只针对行内元素或者行内块元素有效 常用于让图片和文字垂直居中 */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* 顶线top 中线middle 默认基线对齐baseline 底线bottom*/</span></span><br><span class="line">    <span class="attribute">vertical-align</span>: middle; <span class="comment">/*不要让行内块元素与文字基线对齐*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十六、单行文本溢出显示省略号*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="comment">/* 这个单词的意思是如果文字显示不开自动换行 */</span></span><br><span class="line">    <span class="comment">/* white-space: normal; */</span></span><br><span class="line">    <span class="comment">/* 1.这个单词的意思是如果文字显示不开也必须强制一行内显示 */</span></span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="comment">/* 2.溢出的部分隐藏起来 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="comment">/* 3. 文字溢出的时候用省略号来显示 */</span></span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十七、多行文本溢出显示省略号 兼容性只支持Webkit浏览器*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="comment">/*这个效果一般让后端人员做,因为后端人员可以设置显示多少个字,操作更简单*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">65px</span>;</span><br><span class="line">    <span class="comment">/*以下内容不用改,直接粘贴即可*/</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="comment">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十八、布局技巧*/</span></span><br><span class="line"><span class="comment">/*margin负值的巧妙运用,消除浮动盒子的边框过粗*/</span></span><br><span class="line"><span class="comment">/*相对定位提高层级,压住其他盒子,z-index提高层级*/</span></span><br><span class="line"><span class="comment">/*文字围绕浮动元素的妙用*/</span></span><br><span class="line"><span class="comment">/*CSS三角强化的巧妙运用*/</span></span><br><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 把上边框宽度调大 */</span></span><br><span class="line">    <span class="comment">/* border-top: 100px solid transparent;</span></span><br><span class="line"><span class="comment">    border-right: 50px solid skyblue; */</span></span><br><span class="line">    <span class="comment">/* 左边和下边的边框宽度设置为0 */</span></span><br><span class="line">    <span class="comment">/* border-bottom: 0 solid blue;</span></span><br><span class="line"><span class="comment">    border-left: 0 solid green; */</span></span><br><span class="line">    <span class="comment">/* 1.只保留右边的边框有颜色 */</span></span><br><span class="line">    <span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">    <span class="comment">/* 2. 样式都是solid */</span></span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="comment">/* 3. 上边框宽度要大， 右边框 宽度稍小， 其余的边框该为 0 */</span></span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*二十九、CSS3新增选择器*/</span></span><br><span class="line"><span class="comment">/*29.1 属性选择器*/</span></span><br><span class="line"><span class="comment">/* 类选择器和属性选择器 伪类选择器 权重都是 10 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=icon]</span> &#123; <span class="comment">/*开头*/</span></span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span><span class="selector-attr">[class$=data]</span> &#123; <span class="comment">/*结尾*/</span></span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.icon1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*29.2 结构伪类选择器*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123; <span class="comment">/* 1. 选择ul里面的第一个孩子 小li */</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123; <span class="comment">/* 2. 选择ul里面的最后一个孩子 小li */</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> &#123; <span class="comment">/* 3. 选择ul里面的第2个孩子 小li */</span></span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(6)</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*29.3 结构伪类选择器-nth-child*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(even)</span> &#123; <span class="comment">/* 1.把所有的偶数 even的孩子选出来 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(odd)</span> &#123; <span class="comment">/* 2.把所有的奇数 odd的孩子选出来 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(-2n+5)</span> &#123; <span class="comment">/* 从0开始 每次加1 往后面计算  可以加减乘除自由组合*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*29.4 选择器nth-type-of*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-of-type</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type(even)</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*29.5 伪元素选择器before和after 常和字体图标结合使用*/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span> &#123; <span class="comment">/* div::before 权重是2 */</span></span><br><span class="line">    <span class="comment">/* 这个content是必须要写的 */</span></span><br><span class="line">    <span class="comment">/* display: inline-block; */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;我&#x27;</span>;</span><br><span class="line">    <span class="comment">/* width: 30px;</span></span><br><span class="line"><span class="comment">    height: 40px;</span></span><br><span class="line"><span class="comment">    background-color: purple; */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;小猪佩奇&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123; <span class="comment">/*常和字体图标结合使用*/</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>, serif; <span class="comment">/* 需要指定字体，才能使用字体图标 */</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;\e91e&#x27;</span>;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三十、CSS3盒子模型*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">20px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="comment">/* css3 盒子模型  盒子最终的大小就是 width  200 的大小 */</span></span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三十一、图片模糊处理filter*/</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/* blur是一个函数 小括号里面数值越大，图片越模糊 注意数值要加px单位 */</span></span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">15px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三十二、CSS3属性calc函数*/</span></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">30px</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*三十三、CSS3 过渡效果 重点*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="comment">/* transition: 变化的属性 花费时间 运动曲线 何时开始; */</span></span><br><span class="line">    <span class="comment">/* transition: width .5s ease 0s, height .5s ease 1s; */</span></span><br><span class="line">    <span class="comment">/* 如果想要写多个属性，利用逗号进行分割 */</span></span><br><span class="line">    <span class="comment">/* transition: width .5s, height .5s; */</span></span><br><span class="line">    <span class="comment">/* 如果想要多个属性都变化，属性写all就可以了 */</span></span><br><span class="line">    <span class="comment">/* transition: height .5s ease 1s; */</span></span><br><span class="line">    <span class="comment">/* 谁做过渡，给谁加 */</span></span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>I</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-css.html</title>
    <url>/notes/notes-css-html/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三种样式表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1、外部样式表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;notes-css.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--2、内部样式表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--3、行内样式表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: pink; font-size: 20px;&quot;</span>&gt;</span>给我一个粉红的回忆<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes-html.html</title>
    <url>/notes/notes-html-html/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span> <span class="comment">&lt;!-- 1、记住中文 zh-CN --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span> <span class="comment">&lt;!-- 2、记住编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Html Of Notes<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3、记住常用标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 4、记住文本格式标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 5、记住div和span标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--6、记住图像标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://www.itcast.cn/2018czgw/images/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;alt图像显示不出来时显示&quot;</span> <span class="attr">title</span>=<span class="string">&quot;鼠标悬停的提示文本&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--7、记住超链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.qq.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>腾讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--8、记住表格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span> 年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- td标签 colspan=&quot;2&quot; rowspan=&quot;2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>男<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span> 56<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--9、记住列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>自定义列表<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>子元素<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--10、记住表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;xxx.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- text 文本框 用户可以里面输入任何文字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        用户名:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- password 密码框 用户看不见输入的密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        密码:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- radio 单选按钮  可以实现多选一 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name 是表单元素名字 这里性别单选按钮必须有相同的名字name 才可以实现多选1 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 单选按钮和复选框可以设置checked 属性, 当页面打开的时候就可以默认选中这个按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        性别:</span><br><span class="line">        男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span></span><br><span class="line">        女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">        人妖<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;人妖&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- checkbox 复选框  可以实现多选 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        爱好:</span><br><span class="line">        吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>&gt;</span></span><br><span class="line">        睡觉 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">        打豆豆 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击了提交按钮,可以把 表单域 form 里面的表单元素 里面的值 提交给后台服务器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 重置按钮可以还原表单元素初始的默认状态 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重新填写&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 普通按钮 button  后期结合js 搭配使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取短信验证码&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件域 使用场景 上传文件使用的 --&gt;</span></span><br><span class="line">    上传头像: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--11、记住label标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span> 用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--12、记住下拉表单--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    籍贯:</span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>火星<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--13、记住textarea标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        今日反馈:</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span>pink老师,我知道这个反馈留言是textarea来做的 <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--14、记住头部标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>头部标签<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--15、记住导航栏标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航栏标签<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--16、记住区域标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    某个区域标签</span><br><span class="line">    <span class="comment">&lt;!--17、记住视频标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/mi.mp4&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">muted</span>=<span class="string">&quot;muted&quot;</span> <span class="attr">loop</span>=<span class="string">&quot;loop&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">poster</span>=<span class="string">&quot;https://www.baidu.com//mi.png&quot;</span>&gt;</span>视频标签</span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--18、记住音频标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com//music.mp3&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;autoplay&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span>&gt;</span>音频标签<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--19、记住新增的input表单类型--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们验证的时候必须添加form表单域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>网址: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>日期: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>数量: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>搜索: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>颜色: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当我们点击提交按钮就可以验证表单了 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy</title>
    <url>/notes/numpy/</url>
    <content><![CDATA[<p>学习资源整理</p>
<p><a href="https://github.com/zhaohuicici/Python-lib/tree/master/numpy">练习题</a></p>
<p><a href="https://github.com/zhouyuanmin/Data-Science-Notes/tree/master/2.numpy">笔记</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Operator-Equal</title>
    <url>/notes/operator-equal/</url>
    <content><![CDATA[<h3 id="比较两个对象是否完全相等"><a href="#比较两个对象是否完全相等" class="headerlink" title="比较两个对象是否完全相等"></a>比较两个对象是否完全相等</h3><p>方法1，使用==</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">b &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">c &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 3&#125;</span><br><span class="line"></span><br><span class="line">print(a &#x3D;&#x3D; b)  # True</span><br><span class="line">print(a &#x3D;&#x3D; c)  # False</span><br></pre></td></tr></table></figure>

<p>方法2，使用operator</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import operator</span><br><span class="line"></span><br><span class="line">a &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">b &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">c &#x3D; &#123;&#39;a&#39;: 2, &#39;b&#39;: 2&#125;</span><br><span class="line">print(operator.eq(a, b))  # True</span><br><span class="line">print(operator.eq(a, c))  # False</span><br></pre></td></tr></table></figure>

 <a id="more"></a>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Py-Basics</title>
    <url>/notes/py-basics/</url>
    <content><![CDATA[<h3 id="Python标准数据结构"><a href="#Python标准数据结构" class="headerlink" title="Python标准数据结构"></a>Python标准数据结构</h3><h3 id="一、数字-Number"><a href="#一、数字-Number" class="headerlink" title="一、数字 Number"></a>一、数字 Number</h3><h5 id="1-支持类型"><a href="#1-支持类型" class="headerlink" title="1.支持类型"></a>1.支持类型</h5><ul>
<li>int、float、complex </li>
</ul>
<h5 id="2-转换"><a href="#2-转换" class="headerlink" title="2.转换"></a>2.转换</h5><ul>
<li>int(x) , float(x) , complex(x[,y])</li>
</ul>
<h5 id="3-整数表示"><a href="#3-整数表示" class="headerlink" title="3.整数表示"></a>3.整数表示</h5><ul>
<li>0xA1 , 0o241 , 161 ,  0b10100001</li>
<li>hex() , otc() , int() , bin()</li>
</ul>
<a id="more"></a>

<h5 id="4-补充"><a href="#4-补充" class="headerlink" title="4.补充"></a>4.补充</h5><ul>
<li>/ 和 // 区分</li>
</ul>
<h5 id="5-数学函数"><a href="#5-数学函数" class="headerlink" title="5.数学函数"></a>5.数学函数</h5><ul>
<li>abs(-10) 返回绝对值</li>
<li>math.ceil(4.1) 向上取整</li>
<li>math.floor(4.9) 向下取整</li>
<li>round(2.675, 2) 四舍五入，保留两位</li>
</ul>
<h3 id="二、字符串-String"><a href="#二、字符串-String" class="headerlink" title="二、字符串 String"></a>二、字符串 String</h3><h5 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h5><ul>
<li>.capitalize() 第一个字符转换为大写</li>
<li>.count(str, beg= 0,end=len(string)) 计数，beg和end是index范围</li>
<li>.decode()和.encode()</li>
<li>.find(str, beg= 0,end=len(string))  返回index或者-1</li>
<li>.isalnum()  都是字母或者数字</li>
<li>.isalpha() 都是字母</li>
<li>.isdigit()  都是数字</li>
<li>.islower() 和 .isupper() 都是小写或者大写</li>
<li>.join(seq) 合并</li>
<li>.lower() 转小写， upper()  转大写</li>
<li>.replace(old, new [, max])  替换</li>
<li>.strip() , .lstrip() , .rstrip()  删除左右空格</li>
<li>.split(str=””, num=string.count(str))  分隔成list</li>
</ul>
<h5 id="2-格式化输出"><a href="#2-格式化输出" class="headerlink" title="2.格式化输出"></a>2.格式化输出</h5><ul>
<li><strong>:</strong> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</li>
<li><strong>^</strong>, <strong>&lt;**, **&gt;</strong> 分别是居中、左对齐、右对齐，后面带宽度，如 {:&gt;10d}</li>
<li><strong>+</strong> 表示在正数前显示 <strong>+**，负数前显示 **-</strong></li>
<li>b、d、o、x 分别是二进制、十进制、八进制、十六进制。</li>
<li>. 右边是保留小数位数，左边则是总位数。print(“{:#&gt;13.3f}”.format(2022220.22222))</li>
</ul>
<h3 id="三、列表-List"><a href="#三、列表-List" class="headerlink" title="三、列表 List"></a>三、列表 List</h3><h5 id="1-常用方法-1"><a href="#1-常用方法-1" class="headerlink" title="1.常用方法"></a>1.常用方法</h5><ul>
<li>.append()</li>
<li>.count()</li>
<li>.extend()  追加seq</li>
<li>.index()</li>
<li>.insert()</li>
<li>.pop()</li>
<li>.remove(obj)  移除第一个匹配项</li>
<li>.reverse()  反转列表（原list）</li>
<li>.sort(key=None,reverse=False)  排序</li>
<li>.clear()</li>
<li>.copy()</li>
</ul>
<h5 id="2-补充"><a href="#2-补充" class="headerlink" title="2.补充"></a>2.补充</h5><ul>
<li>list()</li>
</ul>
<h3 id="四、元组-Tuple"><a href="#四、元组-Tuple" class="headerlink" title="四、元组 Tuple"></a>四、元组 Tuple</h3><h5 id="1-补充"><a href="#1-补充" class="headerlink" title="1.补充"></a>1.补充</h5><ul>
<li>tuple(iterable)</li>
</ul>
<h3 id="五、集合-Set"><a href="#五、集合-Set" class="headerlink" title="五、集合 Set"></a>五、集合 Set</h3><h5 id="1-常用方法-2"><a href="#1-常用方法-2" class="headerlink" title="1.常用方法"></a>1.常用方法</h5><ul>
<li>.add()</li>
<li>.update(x [,x])   添加, x 可以多个, x 可以为 list, set, dict</li>
<li>.remove( x ) 推荐使用 .discard( x ) 不会报错</li>
<li>.pop()  随机删除一个</li>
<li>.clear()</li>
</ul>
<h5 id="2-补充-1"><a href="#2-补充-1" class="headerlink" title="2.补充"></a>2.补充</h5><ul>
<li>x in set</li>
<li>两个set操作有 <strong>- | &amp; ^</strong></li>
</ul>
<h3 id="六、字典-Dictionary"><a href="#六、字典-Dictionary" class="headerlink" title="六、字典 Dictionary"></a>六、字典 Dictionary</h3><h5 id="1-常用方法-3"><a href="#1-常用方法-3" class="headerlink" title="1.常用方法"></a>1.常用方法</h5><ul>
<li>.clear()</li>
<li>.copy()</li>
<li>.get(key, default=None)</li>
<li>items()  和  keys()  和  values()</li>
<li>setdefault(key,default=None)  其他部分等价于 get()</li>
<li>.update(dict2)</li>
<li>pop(key [,default])</li>
<li>popitem()</li>
</ul>
<h5 id="2-补充-2"><a href="#2-补充-2" class="headerlink" title="2.补充"></a>2.补充</h5><ul>
<li>len(dict)</li>
<li>str(dict)</li>
<li>key in dict</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Py-Built-Lib</title>
    <url>/notes/py-built-lib/</url>
    <content><![CDATA[<h3 id="Python常用内置库"><a href="#Python常用内置库" class="headerlink" title="Python常用内置库"></a>Python常用内置库</h3><h3 id="0-内置函数"><a href="#0-内置函数" class="headerlink" title="0.内置函数"></a>0.内置函数</h3><ul>
<li>chr()   转换一个[0, 255]之间的整数为对应的ASCII字符</li>
<li>ord()   将一个ASCII字符转换为对应整数</li>
</ul>
<a id="more"></a>

<h3 id="1-copy"><a href="#1-copy" class="headerlink" title="1.copy"></a>1.copy</h3><ul>
<li>copy.deepcopy(a)</li>
<li>copy.copy(a)</li>
</ul>
<h3 id="2-random"><a href="#2-random" class="headerlink" title="2.random"></a>2.random</h3><ul>
<li>random.shuffle(list)  洗牌</li>
<li>random.randint(a,b)  随机整数[a,b]</li>
<li>random.random()  随机(0,1)</li>
<li>random.choice(seq)</li>
<li>random.randrange(0, 101, 2)   包前不包后</li>
</ul>
<h3 id="3-os"><a href="#3-os" class="headerlink" title="3.os"></a>3.os</h3><ul>
<li>负责与操作系统交互</li>
<li>os.remove()</li>
<li>os.rename(src, dst)  重命名</li>
<li>os.mkdir()</li>
<li>os.remkdir()  删除目录</li>
<li>os.getcwd()</li>
<li>os.chdir()  改变当前脚本的工作路径，相当于shell下的cd</li>
</ul>
<h3 id="4-sys"><a href="#4-sys" class="headerlink" title="4.sys"></a>4.sys</h3><ul>
<li>负责与Python解释器交互</li>
<li>sys.exit(0)</li>
<li>sys.path 解释器的环境变量是list格式</li>
</ul>
<h3 id="5-time"><a href="#5-time" class="headerlink" title="5.time"></a>5.time</h3><ul>
<li>time.time()  时间戳数字</li>
<li>time.localtime()   返回struct_time对象</li>
<li>time.asctime()  格式化输出</li>
<li>time.strftime(“%Y-%m-%d %H:%M:%S”)   格式化输出</li>
<li>time.strptime(“2016/05/22”,”%Y/%m/%d”)    返回struct_time对象</li>
</ul>
<h3 id="6-datetime"><a href="#6-datetime" class="headerlink" title="6.datetime"></a>6.datetime</h3><ul>
<li>a = datetime.datetime.now()</li>
<li>a.strftime(“%Y-%m-%d %H:%M:%S”)   格式化输出</li>
<li>a.utctimetuple()   # 返回struct_time对象，与time.localtime()对象类型相同，值也相同</li>
<li>datetime.timedelta(day=3, hours=12, minutes=30, seconds=30)</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Py-Call-C</title>
    <url>/notes/py-call-c/</url>
    <content><![CDATA[<h3 id="Python3-调用C语言代码"><a href="#Python3-调用C语言代码" class="headerlink" title="Python3 调用C语言代码"></a>Python3 调用C语言代码</h3><h5 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">centos7+python3.6</span><br></pre></td></tr></table></figure>

<h5 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python中的ctypes模块可能是Python调用C方法中最简单的一种。</span><br><span class="line">ctypes模块提供了和C语言兼容的数据类型和函数来加载dll文件，</span><br><span class="line">因此在调用时不需对源文件做任何的修改，也正是如此奠定了这种方法的简单性。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h5><h6 id="1-准备C语言程序，保存为add-c"><a href="#1-准备C语言程序，保存为add-c" class="headerlink" title="1.准备C语言程序，保存为add.c"></a>1.准备C语言程序，保存为add.c</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add_float</span><span class="params">(<span class="keyword">float</span>, <span class="keyword">float</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">add_float</span><span class="params">(<span class="keyword">float</span> num1, <span class="keyword">float</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-编译成so库"><a href="#2-编译成so库" class="headerlink" title="2.编译成so库"></a>2.编译成so库</h6><p>输入命令即可，会出现一个.so文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -shared -Wl,-soname,adder -o adder.so -fPIC add.c</span><br></pre></td></tr></table></figure>

<h6 id="3-准备python代码，保存为python-c-py"><a href="#3-准备python代码，保存为python-c-py" class="headerlink" title="3.准备python代码，保存为python-c.py"></a>3.准备python代码，保存为python-c.py</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"> </span><br><span class="line"><span class="comment">#load the shared object file</span></span><br><span class="line">adder = ctypes.cdll.LoadLibrary(<span class="string">&#x27;./adder.so&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Find sum of integers</span></span><br><span class="line">res_int = adder.add_int(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(<span class="string">&quot;4 + 5 = &quot;</span> + <span class="built_in">str</span>(res_int))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#Find sum of floats</span></span><br><span class="line">a = ctypes.c_float(<span class="number">5.5</span>)</span><br><span class="line">b = ctypes.c_float(<span class="number">4.1</span>)</span><br><span class="line"> </span><br><span class="line">add_float = adder.add_float</span><br><span class="line">add_float.restype = ctypes.c_float</span><br><span class="line"> </span><br><span class="line">print(<span class="string">&quot;5.5 + 4.1 = &quot;</span> + <span class="built_in">str</span>(add_float(a, b)))</span><br></pre></td></tr></table></figure>

<h6 id="4-执行"><a href="#4-执行" class="headerlink" title="4.执行"></a>4.执行</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 python-c.py</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 + 5 &#x3D; 9</span><br><span class="line">5.5 + 4.1 &#x3D; 9.600000381469727</span><br></pre></td></tr></table></figure>

<h6 id="5-特殊说明"><a href="#5-特殊说明" class="headerlink" title="5.特殊说明"></a>5.特殊说明</h6><ul>
<li>在Python文件中，一开始先导入ctypes模块，然后使用cdll.LoadLibrary函数来加载我们创建的库文件。这样我们就可以通过变量adder来使用C类库中的函数了。当adder.add_int()被调用时，内部将发起一个对C函数add_int的调用。ctypes接口允许我们在调用C函数时使用原生Python中默认的字符串型和整型。</li>
<li>而对于其他类似布尔型和浮点型这样的类型，必须要使用正确的ctype类型才可以。如向adder.add_float()函数传参时, 我们要先将Python中的十进制值转化为c_float类型，然后才能传送给C函数。这种方法虽然简单，清晰，但是却很受限。例如，并不能在C中对对象进行操作。</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Py-Oop</title>
    <url>/notes/py-oop/</url>
    <content><![CDATA[<h4 id="Technical-Term"><a href="#Technical-Term" class="headerlink" title="Technical Term"></a>Technical Term</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class 类</span><br><span class="line">instance 实例</span><br><span class="line">method 方法</span><br><span class="line">subclass 子类</span><br><span class="line">super class 父类</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 实例方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_score</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 类方法用@classmethod修饰，形参为cls</span></span><br><span class="line"><span class="comment"># 类实例方法，形参为self</span></span><br><span class="line"><span class="comment"># 静态方法用@staticmethod修饰，对象直接调用，实际上跟该类没有太大关系</span></span><br></pre></td></tr></table></figure>

<h4 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"><span class="comment"># 类属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&#x27;Student&#x27;</span>  </span><br></pre></td></tr></table></figure>

<h4 id="限制实例的属性"><a href="#限制实例的属性" class="headerlink" title="限制实例的属性"></a>限制实例的属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于Python是动态语言，根据类创建的实例可以任意绑定属性</span></span><br><span class="line"><span class="comment"># 使用__slots__限制实例的属性</span></span><br><span class="line"><span class="comment"># __slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br></pre></td></tr></table></figure>

<h4 id="实例属性检查与暴露"><a href="#实例属性检查与暴露" class="headerlink" title="实例属性检查与暴露"></a>实例属性检查与暴露</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @property装饰器：负责把一个方法变成属性调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h4 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># C3算法：MRO(Method Resolution Order)方法解析顺序</span><br><span class="line"># super()可以帮我们执⾏MRO中下⼀个⽗类的⽅法.</span><br><span class="line"># MixIn设计模式（多重继承设计模式）</span><br></pre></td></tr></table></figure>

<h4 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># __len__(self) 与 len()</span><br><span class="line"># __str__(self) 与 print()打印  # __repr__(self)</span><br><span class="line"># __iter__(self) 和 __next__(self)</span><br><span class="line"># __getitem__(self, n) # fib[12]和fib[5:12]</span><br><span class="line"># __delitem__(self, key)  # 与__setitem__(self,name,value)类似，每次都调用</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># __setitem__(self,name,value)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self[<span class="string">&#x27;B&#x27;</span>] = <span class="string">&#x27;BB&#x27;</span></span><br><span class="line">        self[<span class="string">&#x27;D&#x27;</span>] = <span class="string">&#x27;DD&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, name, value</span>):</span></span><br><span class="line">        print(<span class="string">&quot;__setitem__:Set %s Value %s&quot;</span> % (name, value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    X = A()</span><br><span class="line"><span class="comment"># 输出结果如下</span></span><br><span class="line"><span class="comment"># __setitem__:Set B Value BB</span></span><br><span class="line"><span class="comment"># __setitem__:Set D Value DD</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># __getattr__(self, attr)  # 动态返回属性attr</span><br><span class="line"># 链式调用，SDK的API常用</span><br><span class="line"># __call__(self, name)  # 直接调用</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chain</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">        self._path = path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, path</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Chain(<span class="string">&#x27;%s/%s&#x27;</span> % (self._path, path))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, user</span>):</span></span><br><span class="line">        <span class="keyword">return</span> Chain(self.__getattr__(user))</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(Chain().status.user.timeline.<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 输出: /status/user/timeline/list</span></span><br><span class="line">print(Chain().users(<span class="string">&#x27;Jason&#x27;</span>).repos)</span><br><span class="line"><span class="comment"># 输出: /users/Jason/repos</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 何动态获取和设置对象的属性 has,get,set &gt; attr</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(Parent，<span class="string">&#x27;x&#x27;</span>):</span><br><span class="line">    print(<span class="built_in">getattr</span>(Parent, <span class="string">&#x27;x&#x27;</span>))</span><br><span class="line">    <span class="built_in">setattr</span>(Parent, <span class="string">&#x27;x&#x27;</span>, <span class="number">3</span>)</span><br><span class="line">print(<span class="built_in">getattr</span>(Parent, <span class="string">&#x27;x&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><a href="">未完，待补充</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Pydes-Des</title>
    <url>/notes/pydes-des/</url>
    <content><![CDATA[<p><strong>3DES</strong></p>
<p><em>加密和解密的例子</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_3des</span>(<span class="params">plain_text</span>):</span></span><br><span class="line">    key = <span class="string">b&quot;secret_key123456&quot;</span></span><br><span class="line">    obj = pyDes.triple_des(key=key, mode=pyDes.ECB, pad=<span class="literal">None</span>, padmode=pyDes.PAD_PKCS5)</span><br><span class="line">    cipher_text = obj.encrypt(plain_text)</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(cipher_text).decode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_3des</span>(<span class="params">cipher_text</span>):</span></span><br><span class="line">    cipher_text = base64.b64decode(cipher_text)</span><br><span class="line">    key = <span class="string">b&quot;secret_key123456&quot;</span></span><br><span class="line">    obj = pyDes.triple_des(key=key, mode=pyDes.ECB, pad=<span class="literal">None</span>, padmode=pyDes.PAD_PKCS5)</span><br><span class="line">    plain_text = obj.decrypt(cipher_text)</span><br><span class="line">    <span class="keyword">return</span> plain_text.decode()</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;613772bhh 3h4jh3j4&quot;</span></span><br><span class="line">a = encrypt_3des(text)</span><br><span class="line">print(a)</span><br><span class="line">b = decrypt_3des(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<a id="more"></a>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>II</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pymysql</title>
    <url>/notes/pymysql/</url>
    <content><![CDATA[<p>使用python操作mysql</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> MySQLError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDemo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.db = pymysql.connect(</span><br><span class="line">            host=<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">            user=<span class="string">&quot;****&quot;</span>,</span><br><span class="line">            passwd=<span class="string">&quot;******&quot;</span>,</span><br><span class="line">            database=<span class="string">&quot;******&quot;</span>,</span><br><span class="line">            port=<span class="number">3306</span></span><br><span class="line">        )</span><br><span class="line">        self.cursor = self.db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_table</span>(<span class="params">self</span>):</span></span><br><span class="line">        sql = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.cursor.execute(sql)  <span class="comment"># 直接就创建了,相对&quot;增改删&quot;,不需要数据库提交commit</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_or_update_or_delete</span>(<span class="params">self</span>):</span>  <span class="comment"># 插入、更新、删除</span></span><br><span class="line">        sql = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        self.db.commit()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            self.db.commit()</span><br><span class="line">        <span class="keyword">except</span> MySQLError <span class="keyword">as</span> e:  <span class="comment"># 基类</span></span><br><span class="line">            print(e.args)</span><br><span class="line">            self.db.rollback()  <span class="comment"># db.commit失败,则需要db.rollback,记住是连接对象db的</span></span><br><span class="line">        lines = self.cursor.rowcount  <span class="comment"># 影响的行数 或者 返回的数据条数</span></span><br><span class="line">        print(<span class="built_in">type</span>(lines), lines)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        sql = <span class="string">&quot;SELECT * FROM access_log&quot;</span></span><br><span class="line">        self.cursor.execute(sql)</span><br><span class="line">        result = self.cursor.fetchone()  <span class="comment"># 一行数据,类似(),不可修改</span></span><br><span class="line">        results = self.cursor.fetchall()  <span class="comment"># 所以行的数据,类[(),()],不可修改</span></span><br><span class="line">        lines = self.cursor.rowcount  <span class="comment"># 影响的行数 或者 返回的数据条数</span></span><br><span class="line">        print(<span class="built_in">type</span>(result), result)</span><br><span class="line">        print(<span class="built_in">type</span>(results), results)</span><br><span class="line">        print(<span class="built_in">type</span>(lines), lines)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.db.close()</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>III</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Oop</title>
    <url>/notes/python-oop/</url>
    <content><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/23625909">super</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/61042358">面向对象</a></p>
<a id="more"></a>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Python</tag>
        <tag>Opp</tag>
      </tags>
  </entry>
  <entry>
    <title>Report-Speech</title>
    <url>/notes/report-speech/</url>
    <content><![CDATA[<h4 id="总结一些做汇报和演讲时，需要注意的事情"><a href="#总结一些做汇报和演讲时，需要注意的事情" class="headerlink" title="总结一些做汇报和演讲时，需要注意的事情"></a>总结一些做汇报和演讲时，需要注意的事情</h4><p>主要从“演讲前的准备”、“演讲中”、“如何结束演讲”、“遇到提问，如何回答”这几个方面来阐述</p>
<h5 id="一、演讲前的准备"><a href="#一、演讲前的准备" class="headerlink" title="一、演讲前的准备"></a>一、演讲前的准备</h5><p>基本上都需要有PPT，还需要符合风格，需要事先熟悉PPT，不要卡壳，不要读错字，</p>
<p>最好是图片，和关键字，其他的全靠后面讲，把要讲的内容理清</p>
 <a id="more"></a>

<h5 id="二、演讲中"><a href="#二、演讲中" class="headerlink" title="二、演讲中"></a>二、演讲中</h5><h5 id="三、如何结束演讲"><a href="#三、如何结束演讲" class="headerlink" title="三、如何结束演讲"></a>三、如何结束演讲</h5><h5 id="四、遇到提问，如何回答"><a href="#四、遇到提问，如何回答" class="headerlink" title="四、遇到提问，如何回答"></a>四、遇到提问，如何回答</h5>]]></content>
      <categories>
        <category>Expansion</category>
      </categories>
      <tags>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>requirements.txt</title>
    <url>/notes/requirements-txt/</url>
    <content><![CDATA[<p><strong>quirements.txt可以通过<code>pip</code>命令自动生成和安装</strong></p>
<p>生成requirements.txt文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p>安装requirements.txt依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>IV</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Reverse-Js</title>
    <url>/notes/reverse-js/</url>
    <content><![CDATA[<h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getpwd</span>(<span class="params">plaintext</span>)</span>&#123;  <span class="comment">// 一定要先找到明文</span></span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> ciphertext  <span class="comment">// 返回格式有两种：Hex和base64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="常见加密方式"><a href="#常见加密方式" class="headerlink" title="常见加密方式"></a>常见加密方式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MD5, SHA <span class="comment"># 不可逆 # 常用</span></span><br><span class="line">HMAC, RC4, </span><br><span class="line">AES, DES, <span class="number">3</span>DES <span class="comment"># 可逆 # 常用</span></span><br><span class="line">Base64, Rabbit, PBKDF2/EvpKDF</span><br><span class="line">RSA</span><br></pre></td></tr></table></figure>

<h4 id="chrome-F12"><a href="#chrome-F12" class="headerlink" title="chrome-F12"></a>chrome-F12</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">search</span><br><span class="line">sensors <span class="comment"># 设置经纬度</span></span><br><span class="line">下断点</span><br><span class="line">Breakpoints <span class="comment"># 管理断点</span></span><br><span class="line">Call Stack <span class="comment"># 堆栈</span></span><br><span class="line">抓包勾选Preserve log（保存日志），页面跳转，也能保存上一个界面的日志</span><br></pre></td></tr></table></figure>

<h4 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">http://tool.chacuo.net/cryptdes</span><br><span class="line"><span class="comment"># 用来解析公钥（RSA加密），可获取key长度，模数，指数  </span></span><br><span class="line"><span class="comment"># 公钥没有反斜杠&#x27;\&#x27;,只有&#x27;/&#x27;</span></span><br><span class="line"><span class="comment"># 指数看0x，一般为0x10001,所以就是10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 雷电模拟器 3.63</span></span><br></pre></td></tr></table></figure>

<h4 id="哈希系列通杀"><a href="#哈希系列通杀" class="headerlink" title="哈希系列通杀"></a>哈希系列通杀</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CryptoJS.MD5(&#x27;word&#x27;)</span></span><br><span class="line"><span class="comment"># 哈希加密系列有一个固定值1732584193，可以直接搜索</span></span><br></pre></td></tr></table></figure>

<h4 id="AES加密"><a href="#AES加密" class="headerlink" title="AES加密"></a>AES加密</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mode <span class="comment"># 类型，常用CBC和ECB</span></span><br><span class="line">padding <span class="comment"># 常用Pkos7和Iso10126</span></span><br><span class="line">IV <span class="comment"># 一般为固定值,要选最初值</span></span><br><span class="line">key <span class="comment"># 一般为固定值</span></span><br><span class="line"><span class="comment"># IV和key都有Eno编码规则，如UTF8</span></span><br></pre></td></tr></table></figure>

<h4 id="RAS加密"><a href="#RAS加密" class="headerlink" title="RAS加密"></a>RAS加密</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">指数:一般为<span class="number">10001</span></span><br><span class="line">公钥:(很长)要找出来  <span class="comment"># 1.上一个请求的返回值(getpublickey) 2.js文件中默认 3.js代码生成</span></span><br><span class="line"><span class="comment"># B64编码</span></span><br><span class="line"><span class="comment"># PKCS1指的每次生成值不一样</span></span><br><span class="line"><span class="comment"># 内容反转</span></span><br><span class="line"><span class="comment"># 内存反转</span></span><br></pre></td></tr></table></figure>

<h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 小块弹窗，右键检查源码找到目标网址，放入浏览器打开，会出现一个干净的登录界面，方便抓包</span></span><br><span class="line"><span class="comment"># 密码一般为哈希加密</span></span><br><span class="line"><span class="comment"># 遇到Encrypt加断点</span></span><br><span class="line"><span class="comment"># 方法有传参数，就可能是的</span></span><br></pre></td></tr></table></figure>

<h4 id="JS逆向工具"><a href="#JS逆向工具" class="headerlink" title="JS逆向工具"></a>JS逆向工具</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WT-JS_DEBUG  <span class="comment"># 找安全版本，其他的好像有病毒</span></span><br></pre></td></tr></table></figure>

<h4 id="JS加密实例"><a href="#JS加密实例" class="headerlink" title="JS加密实例"></a>JS加密实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">中关村登录</span><br><span class="line">pwd: <span class="number">3</span>b8aaa16fa213573513038281774d9c0  <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># pwd : md5Password</span></span><br><span class="line"><span class="comment"># var md5Password = CryptoJS.MD5(password+&quot;zol&quot;) + &#x27;&#x27;;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">今目标登录</span><br><span class="line">password: a2c13e941f4f68fde8d92399ddeb3bf25111a434 <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># var result = &#123;&#125;</span></span><br><span class="line"><span class="comment"># result.password = sha1(resultData.password)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">升学e网通 <span class="comment"># AES</span></span><br><span class="line">password: <span class="string">&quot;590d9a610747ab5392a8a164793516a8&quot;</span> <span class="comment"># wuyao666</span></span><br><span class="line"><span class="comment"># password: i = (0, v.Encrypt)(i)</span></span><br><span class="line">t.Encrypt = function(e) &#123;</span><br><span class="line">            var t = n[<span class="string">&quot;default&quot;</span>].enc.Utf8.parse(e);</span><br><span class="line">            <span class="keyword">return</span> n[<span class="string">&quot;default&quot;</span>].AES.encrypt(t, i, &#123;</span><br><span class="line">                iv: o,</span><br><span class="line">                mode: n[<span class="string">&quot;default&quot;</span>].mode.CBC,</span><br><span class="line">                padding: n[<span class="string">&quot;default&quot;</span>].pad.Pkcs7</span><br><span class="line">            &#125;).ciphertext.toString().toUpperCase()</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment"># o = n[&quot;default&quot;].enc.Utf8.parse(&quot;2017110912453698&quot;)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">有赞 <span class="comment">// AES # 网站已经改了</span></span><br><span class="line">Fiddler抓包</span><br><span class="line"><span class="comment">// 对password 加密</span></span><br><span class="line">password: d.a.encrypt(e.password)</span><br><span class="line"><span class="comment">// 源码:</span></span><br><span class="line">n = e.enc.Utf8.parse(<span class="string">&quot;youzan.com.aesiv&quot;</span>)</span><br><span class="line">i = e.enc.Utf8.parse(&quot;youzan.com._key_&quot;)  # i在此处是key</span><br><span class="line"><span class="keyword">var</span> r = e.AES.encrypt(t, i, &#123;</span><br><span class="line">    mode: e.mode.CBC,</span><br><span class="line">    padding: e.pad.Iso10126,</span><br><span class="line">	iv: n  <span class="comment">// 这个值很容易混淆,要找初始值，即enc.Utf8.parse()之前的值.</span></span><br><span class="line">&#125;).toString()</span><br><span class="line"><span class="comment">// 对ticket 加密</span></span><br><span class="line">fingerPrint  <span class="comment">// 指纹，其实就是加密后的一个字符串</span></span><br><span class="line">date:&#123;</span><br><span class="line">    fingerPrint: t ? t + c.default.encrypt(r) : <span class="string">&quot;&quot;</span>,  <span class="comment">// a?b:c</span></span><br><span class="line">    youzanType: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也是AES加密</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">华特东方注册加密 <span class="comment"># 都是AES</span></span><br><span class="line"><span class="comment"># password </span></span><br><span class="line"><span class="comment"># token</span></span><br><span class="line"><span class="comment"># tokens  #参数unid </span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">网页百度登录加密 <span class="comment"># RSA</span></span><br><span class="line"><span class="comment"># token和codestring都是可以固定值的</span></span><br><span class="line"><span class="comment"># gid是随机的，随机数</span></span><br><span class="line"><span class="comment"># password是加密了的RSA,公钥通过请求获取 # password = </span></span><br><span class="line"><span class="comment"># 手机和网页端加密不一样</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">手机百度登录加密 <span class="comment"># RSA</span></span><br><span class="line"><span class="comment"># l.password = window.encryptedString(r,l.password)  # 前面明码经过了拼接</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">运动潮流单品交易平台 <span class="comment"># 拼接+md5</span></span><br><span class="line"><span class="comment"># sign 加密了</span></span><br><span class="line"><span class="comment"># 搜索sign</span></span><br><span class="line"><span class="comment"># t.data.sign || (t.data.sign = Object(I[&quot;b&quot;])(t.data))</span></span><br><span class="line"><span class="comment"># t.transformRequest = M : t.params.sign = Object(I[&quot;b&quot;])(t.params)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 京东登录 #RSA</span></span><br><span class="line"><span class="comment"># nloginpwd</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 微博 # RSA和SHA1</span></span><br><span class="line">sp  <span class="comment"># e.sp = b;   # sp是密码</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 享物说 # 滑动验证(一般都是假的,提交的请求包,没有这些参数值)</span></span><br><span class="line">模拟器有时候会被识别为<span class="string">&quot;高风险设备:伪造设备&quot;</span>，就不会抓到真的包，需要用自己真的手机来抓包  <span class="comment"># fengkong</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Expansion</category>
      </categories>
      <tags>
        <tag>III</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Eight</title>
    <url>/notes/review-eight/</url>
    <content><![CDATA[<h3 id="Python-的内存管理机制及调优手段？"><a href="#Python-的内存管理机制及调优手段？" class="headerlink" title="Python 的内存管理机制及调优手段？"></a>Python 的内存管理机制及调优手段？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存管理机制：引用计数、垃圾回收、内存池</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.引用计数</span></span><br><span class="line">当一个 Python 对象被引用时，引用计数加<span class="number">1</span>，</span><br><span class="line">当不再被一个变量，减<span class="number">1</span>，</span><br><span class="line">当引用计数等于<span class="number">0</span>时对象被删除。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2.垃圾回收</span></span><br><span class="line"><span class="number">2.1</span> 引用计数</span><br><span class="line">当引用计数为<span class="number">0</span>,则被回收 （对循环引用，失效）</span><br><span class="line"><span class="number">2.2</span> 标记清除 </span><br><span class="line">针对循环引用，先将循环引用摘掉，得出有效计数</span><br><span class="line"><span class="number">2.3</span> 分代回收</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3. 内存池</span></span><br><span class="line">用于管理对小块内存的申请和释放（小于<span class="number">256</span>字节的，直接在内存池申请内存）</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">调优手段（了解）</span><br><span class="line"><span class="number">1.</span>手动垃圾回收</span><br><span class="line"><span class="number">2.</span>调高垃圾回收阈值</span><br><span class="line"><span class="number">3.</span>避免循环引用（手动解循环引用和使用弱引用）</span><br></pre></td></tr></table></figure>

<h3 id="内存泄露是什么？如何避免？"><a href="#内存泄露是什么？如何避免？" class="headerlink" title="内存泄露是什么？如何避免？"></a>内存泄露是什么？如何避免？</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 由于设计错误，失去对该段内存的控制，造成内存浪费。</span></span><br><span class="line"><span class="comment"># 有 __del__() 函数的对象间的循环引用是导致内存泄漏的主凶</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 避免</span></span><br><span class="line">不使用一个对象时使用 <span class="keyword">del</span> <span class="built_in">object</span> 删除一个引用计数</span><br><span class="line">可以通过 sys.getrefcount(obj) 获取对象的引用计数，根据返回值是否为 <span class="number">0</span> 判断是否内存泄漏</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Five</title>
    <url>/notes/review-five/</url>
    <content><![CDATA[<h4 id="4G-内存怎么读取一个-5G-的数据？"><a href="#4G-内存怎么读取一个-5G-的数据？" class="headerlink" title="4G 内存怎么读取一个 5G 的数据？"></a>4G 内存怎么读取一个 5G 的数据？</h4><a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一:</span></span><br><span class="line"><span class="comment"># 生成器，分多次读取</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_read</span>(<span class="params">file, separator</span>):</span>  <span class="comment"># 流对象，分隔符</span></span><br><span class="line">    buffer = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> separator <span class="keyword">in</span> buffer:  <span class="comment"># 此处while比if更合适, 处理buffer有多个separator</span></span><br><span class="line">            pos = buffer.index(separator)  <span class="comment"># 获取第一个下标</span></span><br><span class="line">            <span class="keyword">yield</span> separator[:pos]</span><br><span class="line">            buffer = buffer[pos + <span class="built_in">len</span>(separator):]</span><br><span class="line">        chunk = file.read(<span class="number">2000</span>)  <span class="comment"># 太小也会降低效率</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            <span class="keyword">yield</span> buffer</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        buffer = buffer + chunk</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;f.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> my_read(f, separator=<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法二:</span></span><br><span class="line"><span class="comment"># linux命令split切割成小文件</span></span><br><span class="line">split -l <span class="number">300</span> big.txt -d -a <span class="number">4</span> big_  <span class="comment"># 系数不是字母而是数字（-d），后缀系数为四位数（-a 4）</span></span><br><span class="line">split -b <span class="number">10</span>m big.txt big_          <span class="comment"># 按照大小切割</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://blog.csdn.net/mxgsgtc/article/details/12048919">linux命令split切割成小文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Four</title>
    <url>/notes/review-four/</url>
    <content><![CDATA[<p>一、linux环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行命令，如何在任何目录下都可以执行这个命令</span><br><span class="line"># 查找“指定命令”的完整路径，格式：find &#x2F; -name 命令名</span><br><span class="line">find &#x2F; -name mysqladmin</span><br><span class="line"># 把路径直接链接到&#x2F;usr&#x2F;bin下，格式：ln -s 指定命令的路径 &#x2F;usr&#x2F;bin</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin&#x2F;mysqladmin &#x2F;usr&#x2F;bin</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>二、python虚拟环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建空的虚拟环境，pip指定位pip3，python指定位python3</span><br><span class="line"># 安装python3的虚拟环境包，格式：pip3 install virtualenv</span><br><span class="line">例子：pip3 install virtualenv</span><br><span class="line"># 执行命令，加上--no-site-packages，格式：virtualenv --no-site-packages 虚拟环境名</span><br><span class="line">例子：virtualenv --no-site-packages test</span><br><span class="line"># 进入命令，格式：source 虚拟环境名&#x2F;bin&#x2F;activate</span><br><span class="line">例子：source test&#x2F;bin&#x2F;activate</span><br><span class="line"># 退出命令，格式：deactivate</span><br><span class="line">例子：deactivate</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.安装python3</span></span><br><span class="line">yum install python36</span><br><span class="line"><span class="comment"># 2.安装virtualenv和virtualenvwrapper</span></span><br><span class="line">pip3 install virtualenv</span><br><span class="line">pip3 install virtualenvwrapper</span><br><span class="line"><span class="comment"># 3.配置信息</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 在末尾加上如下信息：</span></span><br><span class="line">---------------------------</span><br><span class="line"><span class="comment"># virtualenvwrapper配置</span></span><br><span class="line">export WORKON_HOME=/home/dev/virtualenv   <span class="comment"># 指定虚拟环境存放的目录 </span></span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/<span class="built_in">bin</span>/python3     <span class="comment">#指定python解释器</span></span><br><span class="line">source /usr/local/<span class="built_in">bin</span>/virtualenvwrapper.sh  <span class="comment"># 执行脚本</span></span><br><span class="line">---------------------------</span><br><span class="line">source ~/.bashrc</span><br><span class="line"><span class="comment"># 4.常见命令</span></span><br><span class="line">mkvirtualenv -p python3 虚拟环境名称  <span class="comment"># 创建一个python3的虚拟环境</span></span><br><span class="line">deactivate                <span class="comment"># 退出当前虚拟环境</span></span><br><span class="line">workon [虚拟环境名称]       <span class="comment"># 使用某个虚拟环境</span></span><br><span class="line">rmvirtualenv [虚拟环境名称] <span class="comment"># 删除某个虚拟环境</span></span><br><span class="line">lsvirtualenv              <span class="comment"># 列出所有虚拟环境</span></span><br><span class="line"><span class="comment"># 5.包管理</span></span><br><span class="line"><span class="comment"># 导出</span></span><br><span class="line">pip freeze -l &gt; packages.txt  <span class="comment"># 其中-l参数是只列出当前虚拟环境的包（字母l）</span></span><br><span class="line"><span class="comment"># 导入</span></span><br><span class="line">pip install -r packages.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># window环境</span><br><span class="line"># 1.安装virtualenv和virtualenvwrapper</span><br><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"># 2.指定虚拟环境存放的目录（配置系统环境变量）</span><br><span class="line">变量名：WORKON_HOME</span><br><span class="line">变量值：指定路径即可，eg：D:\virtualenv</span><br><span class="line"># 3.其他等同于linux环境</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Nine</title>
    <url>/notes/review-nine/</url>
    <content><![CDATA[<h1 id="复习-nine"><a href="#复习-nine" class="headerlink" title="复习-nine"></a>复习-nine</h1><h4 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单案例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    _instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> cls._instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls._instance = <span class="built_in">object</span>.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用场景</span></span><br><span class="line"><span class="number">1.</span> 资源共享：日志文件，应用配置</span><br><span class="line"><span class="number">2.</span> 资源控制：应用配置，日志文件，网站计数器，多线程池，数据库配置，数据库连接池</span><br></pre></td></tr></table></figure>

<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">定义：在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</span><br></pre></td></tr></table></figure>

<h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于有切面需求的场景</span></span><br><span class="line"><span class="comment"># 插入日志、性能测试、事务处理、缓存、权限的校验等场景</span></span><br><span class="line"><span class="comment"># 有了装饰器就可以抽离出大量的与函数功能本身无关的雷同代码并发并继续使用</span></span><br></pre></td></tr></table></figure>

<h4 id="Python-中-is-和-的区别？"><a href="#Python-中-is-和-的区别？" class="headerlink" title="Python 中 is 和==的区别？"></a>Python 中 is 和==的区别？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">is</span> 通过<span class="built_in">id</span>判断</span><br><span class="line">== 通过value判断</span><br></pre></td></tr></table></figure>

<h4 id="谈谈你对面向对象的理解？"><a href="#谈谈你对面向对象的理解？" class="headerlink" title="谈谈你对面向对象的理解？"></a>谈谈你对面向对象的理解？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">面向对象是相对于面向过程而言的。面向过程语言是一种基于功能分析的、以算法为中心的程序设计方法；</span><br><span class="line">而面向对象是一种基于结构分析的、以数据为中心的程序设计思想。</span><br><span class="line">在面向对象语言中有一个有很重要东西，叫做类。</span><br><span class="line">面向对象有三大特性：封装、继承、多态。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-One</title>
    <url>/notes/review-one/</url>
    <content><![CDATA[<p><strong>复习-one</strong></p>
<p>1.创建项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject meiduo_mall</span><br></pre></td></tr></table></figure>

<p>2.创建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database meiduo_mall charset&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<p>3.创建用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user itcast identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure>

<p>4.授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all on meiduo_mall.* to &#39;itcast&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<p>5.刷新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>6.日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logger &#x3D; logging.getLogger(&#39;django&#39;)</span><br><span class="line">logger.debug(&#39;测试logging模块debug&#39;)</span><br></pre></td></tr></table></figure>

<p>7.创建app</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python ..&#x2F;..&#x2F;manage.py startapp users</span><br></pre></td></tr></table></figure>

<p>8.HTTP动词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET（SELECT）：从服务器取出资源（一项或多项）。</span><br><span class="line">POST（CREATE）：在服务器新建一个资源。</span><br><span class="line">PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</span><br><span class="line">DELETE（DELETE）：从服务器删除资源。</span><br><span class="line"># 不常用如下：</span><br><span class="line">PATCH（UPDATE）：在服务器更新(更新)资源（客户端提供改变的属性）。</span><br><span class="line">HEAD：获取资源的元数据。</span><br><span class="line">OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</span><br></pre></td></tr></table></figure>

<p>9.过滤信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?limit&#x3D;10：指定返回记录的数量</span><br><span class="line">?offset&#x3D;10：指定返回记录的开始位置。</span><br><span class="line">?page&#x3D;2&amp;per_page&#x3D;100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby&#x3D;name&amp;order&#x3D;asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id&#x3D;1：指定筛选条件</span><br></pre></td></tr></table></figure>

<p>10.状态码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200 OK - [GET&#x2F;PUT&#x2F;PATCH]：服务器成功返回用户请求的数据</span><br><span class="line">201 CREATED - [POST]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST&#x2F;PUT&#x2F;PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST&#x2F;PUT&#x2F;PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure>

<p>11.前端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-cloak 使变量在渲染出来前隐藏. 渲染出来后, 显示.</span><br><span class="line">@blur&#x3D;&quot;check_username&quot;</span><br><span class="line">v-show&#x3D;&quot;error_name&quot;</span><br><span class="line">v-model&#x3D;&quot;password&quot;</span><br><span class="line">@submit&#x3D;&quot;on_submit&quot;</span><br><span class="line">window.event.returnValue &#x3D; false</span><br><span class="line">&lt;img :src&#x3D;&quot;image_code_url&quot;&gt; </span><br><span class="line">@click&#x3D;&quot;send_sms_code&quot;</span><br><span class="line">[[ error_sms_code_message ]]</span><br><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url(&#39;goods:detail&#39;, args&#x3D;(sku.id,)) &#125;&#125;&quot;&gt;&#123;&#123; sku.name &#125;&#125;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p>12.后端方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> http.HttpResponseForbidden(<span class="string">&#x27;请勾选用户协议&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    User.objects.create_user(username=username, password=password, mobile=mobile)</span><br><span class="line"><span class="keyword">except</span> DatabaseError:</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;register.html&#x27;</span>, &#123;<span class="string">&#x27;register_errmsg&#x27;</span>: <span class="string">&#x27;注册失败&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> http.HttpResponse(<span class="string">&#x27;注册成功，重定向到首页&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;contents:index&#x27;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">login(request, user)</span><br><span class="line">logout(request)</span><br><span class="line"><span class="comment"># 进行判断: 是否登录验证</span></span><br><span class="line"><span class="keyword">if</span> request.user.is_authenticated():</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请求地址 &#x2F;usernames&#x2F;(?P&lt;username&gt;[a-zA-Z0-9_-]&#123;5,20&#125;)&#x2F;count&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count &#x3D; User.objects.filter(username&#x3D;username).count()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis_conn &#x3D; get_redis_connection(&#39;verify_code&#39;)</span><br><span class="line">redis_conn.setex(&#39;img_%s&#39; % uuid, 300, text)</span><br><span class="line">redis_conn.get(&#39;img_%s&#39; % uuid)</span><br><span class="line">redis_conn.delete(&#39;img_%s&#39; % uuid)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return http.HttpResponse(image, content_type&#x3D;&#39;imgae&#x2F;jpg&#39;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.JsonResponse(&#123;&#39;code&#39;: RETCODE.OK, &#39;errmsg&#39;: &#39;发送短信成功&#39;&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pl &#x3D; redis_conn.pipeline()</span><br><span class="line">pl.setex(&#39;sms_%s&#39; % mobile, 300, sms_code)</span><br><span class="line">pl.setex(&#39;send_flag_%s&#39; % mobile, 60, 1)</span><br><span class="line">pl.execute()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置状态保持的周期</span></span><br><span class="line"><span class="keyword">if</span> remembered != <span class="string">&#x27;on&#x27;</span>:</span><br><span class="line">    <span class="comment"># 不记住用户：浏览器会话结束就过期</span></span><br><span class="line">    request.session.set_expiry(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 记住用户：None 表示两周后过期</span></span><br><span class="line">    request.session.set_expiry(<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http.HttpResponseNotFound(&#39;GoodsCategory 不存在&#39;)</span><br></pre></td></tr></table></figure>

<p>13.cookie</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response &#x3D; redirect(reverse(&#39;contents:index&#39;))</span><br><span class="line">response.set_cookie(&#39;username&#39;, user.username, max_age &#x3D; 3600 * 24 * 15)</span><br><span class="line">response.delete_cookie(&#39;username&#39;)</span><br></pre></td></tr></table></figure>

<p>14.异常</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">except GoodsCategory.DoesNotExist:</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Seven</title>
    <url>/notes/review-seven/</url>
    <content><![CDATA[<h1 id="复习-Seven"><a href="#复习-Seven" class="headerlink" title="复习-Seven"></a>复习-Seven</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">日志以文本可以存储在“&#x2F;var&#x2F;log&#x2F;”目录下后缀名为.log</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看服务占用的端口</span></span><br><span class="line">netstat -anp | grep service_name</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grep 是查找匹配条件的行</span><br><span class="line">find 是搜索匹配条件的文件（找文件）</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux 重定向命令有哪些？有什么区别?</span></span><br><span class="line"><span class="number">1.</span> 重定向&gt;   覆盖</span><br><span class="line"><span class="number">2.</span> 重定向&gt;&gt;  追加</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 10 个常用的 Linux 命令</span></span><br><span class="line">pwd 显示工作路径</span><br><span class="line">ls 查看目录中的文件</span><br><span class="line">rm -f file1   <span class="comment"># 删文件 -f 不给提示</span></span><br><span class="line">rmdir dir1    <span class="comment"># 删目录</span></span><br><span class="line">groupadd group_name <span class="comment"># 创建一个新用户组</span></span><br><span class="line">groupdel group_name <span class="comment"># 删除一个用户组</span></span><br><span class="line">tar -cvf archive.tar file1 file2 dir1  <span class="comment"># 创建一个非压缩的 tar包</span></span><br><span class="line">tar -tf archive.tar <span class="comment"># 显示一个包中的内容</span></span><br><span class="line">tar -xvf archive.tar -C /tmp <span class="comment"># 解压压缩包到/tmp目录下</span></span><br><span class="line"><span class="comment"># -c 压缩 -x 解压 -v 显示所有过程 -f 压缩包名字</span></span><br><span class="line">tar -cvfj archive.tar.bz2 dir1  <span class="comment"># 创建一个 bzip2 格式的压缩包</span></span><br><span class="line">tar -xvfj archive.tar.bz2       <span class="comment"># 解压一个 bzip2 格式的压缩包</span></span><br><span class="line">tar -cvfz archive.tar.gz dir1   <span class="comment"># 创建一个 gzip 格式的压缩包</span></span><br><span class="line">tar -xvfz archive.tar.gz        <span class="comment"># 解压一个 gzip 格式的压缩包</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关机</span></span><br><span class="line">reboot  <span class="comment"># 重启</span></span><br><span class="line">shutdown –r now  <span class="comment"># 重启，会给其他用户提示</span></span><br><span class="line">shutdown -h <span class="number">20</span>:<span class="number">25</span>   <span class="comment">#  定时关机</span></span><br><span class="line">shutdown -h +<span class="number">10</span>  <span class="comment"># 十分钟后关机</span></span><br><span class="line">init <span class="number">0</span>  <span class="comment"># 关机</span></span><br><span class="line">init <span class="number">6</span>  <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Six</title>
    <url>/notes/review-six/</url>
    <content><![CDATA[<h1 id="复习-six"><a href="#复习-six" class="headerlink" title="复习-six"></a>复习-six</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改不可变数据会抛出TypeError异常</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> 方法默认调用 sys.stdout.write 方法</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件路径操作</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_directory_contents</span>(<span class="params">abs_path</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param abs_path: 文件夹绝对地址</span></span><br><span class="line"><span class="string">    :return: 该文件夹中文件路径+包含的文件夹的文件路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">for</span> child_path <span class="keyword">in</span> os.listdir(abs_path):</span><br><span class="line">        abs_child_path = os.path.join(abs_path, child_path)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(abs_child_path):</span><br><span class="line">            print_directory_contents(abs_child_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(abs_child_path)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">os.remove()删除文件</span></span><br><span class="line"><span class="string">os.rename()重命名文件</span></span><br><span class="line"><span class="string">os.walk()生成目录树下的所有文件名</span></span><br><span class="line"><span class="string">os.chdir()改变目录</span></span><br><span class="line"><span class="string">os.mkdir/makedirs 创建目录/多层目录</span></span><br><span class="line"><span class="string">os.rmdir/removedirs 删除目录/多层目录</span></span><br><span class="line"><span class="string">os.listdir()列出指定目录的文件</span></span><br><span class="line"><span class="string">os.getcwd()取得当前工作目录</span></span><br><span class="line"><span class="string">os.chmod()改变目录权限</span></span><br><span class="line"><span class="string">os.path.basename()去掉目录路径，返回文件名</span></span><br><span class="line"><span class="string">os.path.dirname()去掉文件名，返回目录路径</span></span><br><span class="line"><span class="string">os.path.join()将分离的各部分组合成一个路径名</span></span><br><span class="line"><span class="string">os.path.split()返回（dirname(),basename())元组</span></span><br><span class="line"><span class="string">os.path.splitext()(返回 filename,extension)元组</span></span><br><span class="line"><span class="string">os.path.getatime\ctime\mtime 分别返回最近访问、创建、修改时间</span></span><br><span class="line"><span class="string">os.path.getsize()返回文件大小</span></span><br><span class="line"><span class="string">os.path.exists()是否存在</span></span><br><span class="line"><span class="string">os.path.isabs()是否为绝对路径</span></span><br><span class="line"><span class="string">os.path.isdir()是否为目录</span></span><br><span class="line"><span class="string">os.path.isfile()是否为文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">copy.deepcopy(a)  <span class="comment"># 深拷贝</span></span><br><span class="line"><span class="comment"># &#x27;原子&#x27;类型的对象拷贝,都是返回引用,不是新创建</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># random模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.random()  <span class="comment"># [0,1) float</span></span><br><span class="line">random.uniform(a, b)  <span class="comment"># [a,b] float</span></span><br><span class="line">random.randint(a, b)  <span class="comment"># [a,b] int</span></span><br><span class="line">random.randrange(a, b, step)  <span class="comment"># [a,b) step为步长，随机一个数字</span></span><br><span class="line">random.choice(sequence)  <span class="comment"># list中随机一个元素</span></span><br><span class="line">random.shuffle(alist)  <span class="comment"># 打乱顺序，无返回值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># datetime</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">date1 = datetime.date(year=<span class="built_in">int</span>(<span class="number">100</span>),month=<span class="built_in">int</span>(<span class="number">2</span>),day=<span class="built_in">int</span>(<span class="number">22</span>))</span><br><span class="line">print((date1-date1).days + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sys模块</span></span><br><span class="line">sys.path 主要是对 Python 解释器的系统环境参数的操作（动态的改变 Python 解释器搜索路径）</span><br><span class="line">sys.argv 命令行参数 List，第一个元素是程序本身代码（即此.py程序）<span class="comment"># 有时候带路径</span></span><br><span class="line">sys.exit(n) 退出程序，正常退出时 exit(<span class="number">0</span>)</span><br><span class="line">sys.maxint 最大的 Int 值</span><br><span class="line">sys.maxunicode 最大的 Unicode 值</span><br><span class="line">sys.stdout 标准输出</span><br><span class="line">sys.stdin 标准输入</span><br><span class="line">sys.stderr 错误输出</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python 是强语言类型还是弱语言类型?</span></span><br><span class="line">Python 是强类型的动态脚本语言。  <span class="comment"># 强类型</span></span><br><span class="line">强类型：不允许不同类型相加。</span><br><span class="line">动态：不使用显示数据类型声明，且确定一个变量的类型是在第一次给它赋值的时候。</span><br><span class="line">脚本语言：一般也是解释型语言，运行代码只需要一个解释器，不需要编译。</span><br></pre></td></tr></table></figure>

<p><a href="https://www.woola.net/detail/2016-08-28-python-object-introspection.html">Python自省 (introspection)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PEP8 规范</span></span><br><span class="line"><span class="comment"># 模块和包:除特殊模块 __init__ 之外，模块名称都使用不带下划线的小写字母。若是它们实现一个协议，那么通常使用lib为后缀</span></span><br><span class="line"><span class="comment"># 使用 has 或 is 前缀命名布尔元素 is_connect = True  has_member = False</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 性能分析</span></span><br><span class="line"><span class="keyword">import</span> cProfile</span><br><span class="line">cProfile.run(<span class="string">&#x27;func(agrs)&#x27;</span>)   <span class="comment"># 字符串</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Messy</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Ten</title>
    <url>/notes/review-ten/</url>
    <content><![CDATA[<h4 id="系统编程"><a href="#系统编程" class="headerlink" title="系统编程"></a>系统编程</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程总结</span></span><br><span class="line"><span class="comment"># 程序运行在操作系统上的一个实例，就称之为进程。</span></span><br><span class="line"><span class="comment"># 进程需要相应的系统资源：内存、时间片、pid</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line">proc = Process(target=func, args=(<span class="number">1</span>,), kwargs=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;a&#x27;</span>&#125;, name=<span class="string">&#x27;proc_1&#x27;</span>)</span><br><span class="line">proc.start()</span><br><span class="line">proc.is_alive()  <span class="comment"># 是否还活着</span></span><br><span class="line">proc.join(timeout=<span class="number">10</span>)  <span class="comment"># 等结束，或者等10秒</span></span><br><span class="line">proc.terminate()  <span class="comment"># 强制关闭</span></span><br><span class="line">proc.name</span><br><span class="line">proc.pid</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程之间的通信-Queue  # 只用于本机，不能注册到网络上</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">que = Queue(maxsize=<span class="number">0</span>)  <span class="comment"># 可以指定最大容量</span></span><br><span class="line">que.qsize()  <span class="comment"># 返回当前包含的消息数量</span></span><br><span class="line">que.empty()  <span class="comment"># 为空返回True</span></span><br><span class="line">que.full()   <span class="comment"># 满了返回True</span></span><br><span class="line">que.get(block=<span class="literal">True</span>,timeout=<span class="literal">None</span>)  <span class="comment"># 超时,抛出&quot;Queue.Empty&quot;异常</span></span><br><span class="line">que.put(item,block=<span class="literal">True</span>,timeout=<span class="literal">None</span>)  <span class="comment"># 超时,抛出&quot;Queue.Full&quot;异常</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程池-Pool</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>)</span><br><span class="line">pool.apply_async(func=func, args=(), kwds=&#123;&#125;, callback=<span class="literal">None</span>, error_callback=<span class="literal">None</span>)</span><br><span class="line">pool.close()   <span class="comment"># 必须关闭</span></span><br><span class="line">pool.join()</span><br><span class="line">pool.terminate()</span><br><span class="line"><span class="comment"># 如果要使用 Pool 创建进程，就需要使用 multiprocessing.Manager()中的 Queue()</span></span><br><span class="line"><span class="comment"># 不能使用multiprocessing.Queue()</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">q = Manager().Queue()</span><br></pre></td></tr></table></figure>

<h4 id="你对多进程，多线程，以及协程的理解，项目是否用？"><a href="#你对多进程，多线程，以及协程的理解，项目是否用？" class="headerlink" title="你对多进程，多线程，以及协程的理解，项目是否用？"></a>你对多进程，多线程，以及协程的理解，项目是否用？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程：一个运行的程序（代码）就是一个进程，没有运行的代码叫程序，进程是系统资源分配的最小单位，进程拥有自己独立的内存空间，所以进程间数据不共享，开销大。</span></span><br><span class="line"><span class="comment"># 线程： 调度执行的最小单位，也叫执行路径，不能独立存在，依赖进程存在一个进程至少有一个线程，叫主线程，而多个线程共享内存(数据共享，共享全局变量)，从而极大地提高了程序的运行效率。</span></span><br><span class="line"><span class="comment"># 协程：是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。 协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</span></span><br></pre></td></tr></table></figure>

<h4 id="什么是多线程竞争？"><a href="#什么是多线程竞争？" class="headerlink" title="什么是多线程竞争？"></a>什么是多线程竞争？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 线程是非独立的，同一个进程里线程是数据共享的，当各个线程访问数据资源时会出现竞争状态即：数据几乎同步会被多个线程占用，造成数据混乱 ，即所谓的线程不安全</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 那么怎么解决多线程竞争问题？-- 锁。</span></span><br><span class="line"><span class="comment"># 锁的好处：确保了某段关键代码(共享数据资源)只能由一个线程从头到尾完整地执行能解决多线程资源竞争下的原子操作问题。</span></span><br><span class="line"><span class="comment"># 锁的坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</span></span><br><span class="line"><span class="comment"># 锁的致命问题：死锁。</span></span><br></pre></td></tr></table></figure>

<h4 id="什么是死锁？"><a href="#什么是死锁？" class="headerlink" title="什么是死锁？"></a>什么是死锁？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若干子线程在系统资源竞争时，都在等待对方对某部分资源解除占用状态，结果是谁也不愿先解锁，互相干等着，程序无法执行下去，这就是死锁。</span></span><br><span class="line"><span class="comment"># GIL锁</span></span><br><span class="line"><span class="comment"># 全局解释器锁（只在 cpython 里才有）</span></span><br><span class="line"><span class="comment"># 作用：限制多线程同时执行，保证同一时间只有一个线程执行，所以 cpython 里的多线程其实是伪多线程!</span></span><br><span class="line"><span class="comment"># 所以 Python 里常常使用协程技术来代替多线程，协程是一种更轻量级的线程</span></span><br><span class="line"><span class="comment"># 进程和线程的切换时由系统决定，而协程由我们程序员自己决定，而模块 gevent 下切换是遇到了耗时操作才会切换。</span></span><br><span class="line"><span class="comment"># 三者的关系：进程里有线程，线程里有协程。</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Three</title>
    <url>/notes/review-three/</url>
    <content><![CDATA[<h4 id="os"><a href="#os" class="headerlink" title="os"></a>os</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getpid()</span><br><span class="line">os.getppid()</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 部署分布式（master）</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">task_queue = queue.Queue()  <span class="comment"># 队列，后面会通过BaseManager封装，注册到网络上</span></span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span>(<span class="params">BaseManager</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>, <span class="built_in">callable</span>=<span class="keyword">lambda</span>: task_queue)  <span class="comment"># 必须注册</span></span><br><span class="line">manager = QueueManager(address=(<span class="string">&#x27;&#x27;</span>, <span class="number">5000</span>), authkey=<span class="string">b&#x27;abc&#x27;</span>)</span><br><span class="line">task = manager.get_task_queue()  <span class="comment"># 获取队列queue</span></span><br><span class="line">manager.start()  <span class="comment"># 开启</span></span><br><span class="line">manager.shutdown()  <span class="comment"># 关闭</span></span><br><span class="line"><span class="comment"># slave</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueManager</span>(<span class="params">BaseManager</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>)  <span class="comment"># 一定要注册</span></span><br><span class="line">m = QueueManager(address=(master_ip, <span class="number">5000</span>), authkey=<span class="string">b&#x27;abc&#x27;</span>)</span><br><span class="line">m.connect()</span><br><span class="line">task = m.get_task_queue()</span><br></pre></td></tr></table></figure>

<!-- more -->

<h4 id="threading"><a href="#threading" class="headerlink" title="threading"></a>threading</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">threading.current_thread().name</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> local</span><br></pre></td></tr></table></figure>

<h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.now()</span><br><span class="line">now.timestamp() <span class="comment"># 时间戳</span></span><br><span class="line">datetime.fromtimestamp(<span class="number">1429417200.0</span>)</span><br><span class="line">datetime.utcfromtimestamp(<span class="number">1429417200.0</span>)</span><br><span class="line">now.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S %A&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">datetime.now() + timedelta(days=<span class="number">2</span>, hours=<span class="number">12</span>)</span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timezone</span><br><span class="line">now.replace(tzinfo=timezone(timedelta(hours=<span class="number">8</span>)))</span><br></pre></td></tr></table></figure>

<h4 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 具名元组</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">p = Point(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 使用 p.x</span></span><br><span class="line"><span class="comment"># 队列，等价于list；更高效</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="comment"># 默认字典，等价于dict；key不存在，返回默认值，不报错</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">dd = defaultdict(<span class="keyword">lambda</span>: <span class="string">&#x27;N/A&#x27;</span>)</span><br><span class="line"><span class="comment"># 有序字典</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">od = OrderedDict([(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="comment"># ChainMap</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br></pre></td></tr></table></figure>

<h4 id="ChainMap"><a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">combined = ChainMap(dict1, dict2, defaults)   <span class="comment"># 链式dict</span></span><br></pre></td></tr></table></figure>

<h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment"># 计数器</span></span><br><span class="line">c = Counter()</span><br><span class="line">c.update(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">base64.b64encode(<span class="string">b&quot;abcde&quot;</span>)   <span class="comment"># b&#x27;YWJjZGU=&#x27;  编码</span></span><br><span class="line">base64.b64decode(<span class="string">b&#x27;YWJjZGU=&#x27;</span>)     <span class="comment"># b&#x27;abcde&#x27;   解码</span></span><br><span class="line"><span class="comment"># Base64是一种任意二进制到文本字符串的编码方法，常用于在URL、Cookie、网页中传输少量二进制数据</span></span><br></pre></td></tr></table></figure>

<h4 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="comment"># 转化为bytes</span></span><br><span class="line">struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>,<span class="number">10240099</span>)   <span class="comment"># b&#x27;\x00\x9c@c&#x27;</span></span><br><span class="line"><span class="comment"># 转化为python数据</span></span><br><span class="line">struct.unpack(<span class="string">&#x27;&gt;IH&#x27;</span>, <span class="string">b&#x27;\xf0\xf0\xf0\xf0\x80\x80&#x27;</span>)   <span class="comment"># (4042322160, 32896)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">I：<span class="number">4</span>字节无符号整数,即unsigned <span class="built_in">int</span></span><br><span class="line">H：<span class="number">2</span>字节无符号整数,即unsigned short</span><br><span class="line">c: char</span><br></pre></td></tr></table></figure>

<h4 id="hashlib"><a href="#hashlib" class="headerlink" title="hashlib"></a>hashlib</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.md5()   <span class="comment">#</span></span><br><span class="line">md5.update(<span class="string">&quot;date&quot;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">md5.hexdigest()</span><br><span class="line"><span class="comment"># 补充</span></span><br><span class="line">hashlib.sha1()</span><br><span class="line"><span class="comment"># md5:128 bit字节,32位16进制</span></span><br><span class="line"><span class="comment"># sha1: 160 bit, 40位16进制</span></span><br><span class="line">单向计算特性决定了其作用是防篡改，不能用于加密（不能反推明文）</span><br></pre></td></tr></table></figure>

<h4 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line">h = hmac.new(key=<span class="string">b&#x27;key&#x27;</span>, msg=<span class="literal">None</span>, digestmod=<span class="string">&#x27;MD5&#x27;</span>)</span><br><span class="line">h.update(msg=<span class="string">b&#x27;msg&#x27;</span>)</span><br><span class="line">h.hexdigest()</span><br></pre></td></tr></table></figure>

<h4 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">itertools.count(start=<span class="number">0</span>, step=<span class="number">1</span>)  <span class="comment"># 无限迭代器</span></span><br><span class="line">itertools.cycle(<span class="string">&#x27;ABC&#x27;</span>)  <span class="comment"># iterable 无限重复</span></span><br><span class="line">itertools.repeat(<span class="built_in">object</span> [,times])</span><br><span class="line">itertools.takewhile(<span class="keyword">lambda</span> x: x &lt;= <span class="number">10</span>, natuals) </span><br><span class="line">itertools.chain(*iterables)  <span class="comment"># 合并成一个迭代器</span></span><br></pre></td></tr></table></figure>

<h4 id="contextlib"><a href="#contextlib" class="headerlink" title="contextlib"></a>contextlib</h4><ul>
<li>上下文管理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self   <span class="comment"># 非常重要，一定要返回一个对象，一般返回self</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_value, traceback</span>):</span></span><br><span class="line">        <span class="keyword">if</span> exc_type:</span><br><span class="line">            print(<span class="string">&quot;ERROR处理&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&quot;NO ERROR&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;this is a test class.it is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Test(<span class="string">&#x27;Bob&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.test()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @contextmanager用法一</span></span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Query</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">query</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;Query info about %s...&#x27;</span> % self.name)</span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_query</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;Begin&#x27;</span>)</span><br><span class="line">    q = Query(name)</span><br><span class="line">    <span class="keyword">yield</span> q</span><br><span class="line">    print(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> create_query(<span class="string">&#x27;Bob&#x27;</span>) <span class="keyword">as</span> q:</span><br><span class="line">    q.query()</span><br><span class="line"><span class="comment"># 用法二</span></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span>(<span class="params">name</span>):</span></span><br><span class="line">    print(<span class="string">&quot;&lt;%s&gt;&quot;</span> % name)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    print(<span class="string">&quot;&lt;/%s&gt;&quot;</span> % name)</span><br><span class="line"><span class="keyword">with</span> tag(<span class="string">&quot;h1&quot;</span>):</span><br><span class="line">    print(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;test.jpg&#x27;</span>)  <span class="comment"># 读取图片</span></span><br><span class="line">w, h = im.size   <span class="comment"># 图像尺寸</span></span><br><span class="line">im.thumbnail((w//<span class="number">2</span>, h//<span class="number">2</span>))   <span class="comment"># 缩小</span></span><br><span class="line">im.save(<span class="string">&#x27;thumbnail.jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>)  <span class="comment"># 保存</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="comment"># 生成验证码</span></span><br><span class="line"><span class="comment"># 图片大小，字体类型，字内容，字大小，字</span></span><br><span class="line">image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">60</span> * <span class="number">4</span>, <span class="number">60</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))  <span class="comment"># 创建图片</span></span><br><span class="line">draw = ImageDraw.Draw(image)  <span class="comment"># 操作对象</span></span><br><span class="line">draw.point((<span class="number">50</span>, <span class="number">50</span>), fill=(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>))  <span class="comment"># 修改一个像素点</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">&#x27;Arial.ttf&#x27;</span>, <span class="number">36</span>)  <span class="comment"># 指定字体类型和大小</span></span><br><span class="line">draw.text((<span class="number">60</span>, <span class="number">10</span>), <span class="string">&quot;A&quot;</span>, font=font, fill=(<span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>))  <span class="comment"># 写入一个“A”</span></span><br><span class="line">image.save(<span class="string">&#x27;code.jpg&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="chardet"><a href="#chardet" class="headerlink" title="chardet"></a>chardet</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 猜测bytes到str,的编码规则：utf8,ascii等各种编码格式，包括日语韩语等</span></span><br><span class="line">chardet.detect(<span class="string">b&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="psutil"><a href="#psutil" class="headerlink" title="psutil"></a>psutil</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运维</span></span><br><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line">psutil.cpu_count()  <span class="comment"># CPU逻辑数量 4个</span></span><br><span class="line">psutil.cpu_count(logical=<span class="literal">False</span>)  <span class="comment"># CPU物理核心 2个</span></span><br><span class="line"><span class="comment"># 2说明是双核超线程(1个物理核心对应2个逻辑), 4则是4核非超线程</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/giampaolo/psutil#example-usages">psutil-example</a></p>
<h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">mkdir myproject</span><br><span class="line">cd myproject/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个独立的Python运行环境，命名为venv</span></span><br><span class="line">virtualenv --no-site-packages venv    # 会出现文件夹venv</span><br><span class="line">virtualenv -p /usr/bin/python2.7 venv</span><br><span class="line">–no-site-packages  # 令隔离环境不能访问系统全局的site-packages目录。（好像不能用了）</span><br><span class="line">–system-site-packages # 令隔离环境可以访问系统全局的site-packages目录。</span><br><span class="line">source venv/bin/activate  # 进入该环境，成功命令提示符前面会出现(venv)</span><br><span class="line">deactivate  # 退出该环境</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Review-Two</title>
    <url>/notes/review-two/</url>
    <content><![CDATA[<h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><a id="more"></a>

<ul>
<li>TCP</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TCP客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">&#x27;www.baidu.com&#x27;</span>,<span class="number">80</span>))</span><br><span class="line">s.send(<span class="built_in">bytes</span>)  <span class="comment"># 发送</span></span><br><span class="line">s.recv(<span class="number">1024</span>)  <span class="comment"># 接收bytes,没有数据了，则为空</span></span><br><span class="line">s.close()</span><br><span class="line"><span class="comment"># TCP服务端</span></span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">80</span>))  <span class="comment"># 对外服务绑定0.0.0.0</span></span><br><span class="line">s.listen(<span class="number">5</span>)  <span class="comment"># 等待连接的最大数量</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 接受一个新连接:</span></span><br><span class="line">    sock, addr = s.accept()  <span class="comment"># sock是socket对象,addr是客户端ip地址</span></span><br><span class="line">    <span class="comment"># 创建新线程来处理TCP连接:</span></span><br><span class="line">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class="line">    t.start()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcplink</span>(<span class="params">sock, addr</span>):</span></span><br><span class="line">    ...</span><br><span class="line">    sock.close()    </span><br></pre></td></tr></table></figure>

<!-- more -->

<ul>
<li>UDP</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">80</span>))</span><br><span class="line">data, addr = s.recvfrom(<span class="number">1024</span>)  <span class="comment"># 接收</span></span><br><span class="line">s.sendto(data, (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">80</span>))  <span class="comment"># 发送</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<h4 id="SMTP发送邮件"><a href="#SMTP发送邮件" class="headerlink" title="SMTP发送邮件"></a>SMTP发送邮件</h4><ul>
<li>email构建邮件，smtplib发送邮件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="comment"># 邮件一般是由标题，发信人，收件人，邮件内容，附件等构成</span></span><br><span class="line">msg = MIMEText(<span class="string">&#x27;hello,send by python...&#x27;</span>, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 内容</span></span><br><span class="line">msg[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&#x27;Jason&#x27;</span>)  <span class="comment"># 发件人</span></span><br><span class="line">msg[<span class="string">&#x27;To&#x27;</span>] = Header(<span class="string">&#x27;Administrators&#x27;</span>)  <span class="comment"># 收件人</span></span><br><span class="line">msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&#x27;来自SMTP的问候&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 标题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line">server = smtplib.SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>, <span class="number">25</span>)</span><br><span class="line"><span class="comment"># server.set_debuglevel(1)   # 打印详细</span></span><br><span class="line">server.starttls()  <span class="comment"># 加密</span></span><br><span class="line">server.login(<span class="string">&quot;1837722596@qq.com&quot;</span>, <span class="string">&quot;gphfapcvqmjubeje&quot;</span>)  <span class="comment"># 授权码</span></span><br><span class="line">server.sendmail(<span class="string">&quot;1837722596@qq.com&quot;</span>, [<span class="string">&quot;17859717522@163.com&quot;</span>, <span class="string">&quot;923810495@qq.com&quot;</span>], msg.as_string())</span><br><span class="line">server.quit()</span><br></pre></td></tr></table></figure>

<h4 id="POP3收取邮件"><a href="#POP3收取邮件" class="headerlink" title="POP3收取邮件"></a>POP3收取邮件</h4><ul>
<li>email解析邮件，poplib下载邮件</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以不掌握</span></span><br><span class="line"><span class="keyword">import</span> poplib</span><br><span class="line">server = poplib.POP3(<span class="string">&quot;pop.qq.com&quot;</span>)</span><br><span class="line">server.user(<span class="string">&quot;1837722596@qq.com&quot;</span>)</span><br><span class="line">server.pass_(<span class="string">&quot;gphfapcvqmjubeje&quot;</span>)</span><br><span class="line">server.stat()   <span class="comment"># stat()返回邮件数量和占用空间</span></span><br></pre></td></tr></table></figure>

<h4 id="使用SQLite"><a href="#使用SQLite" class="headerlink" title="使用SQLite"></a>使用SQLite</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQLite是一种嵌入式数据库，它的数据库就是一个文件。</span></span><br><span class="line"><span class="comment"># SQLite本身是C写的,而且体积很小,轻量级、可嵌入</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;sql&#x27;</span>)</span><br><span class="line"><span class="comment"># cursor对象存储了执行sql语句的结果</span></span><br><span class="line"><span class="comment"># values = cursor.fetchall()  # 获取查询结果集,是list类型,里面是tuple对应一行记录.</span></span><br><span class="line"><span class="comment"># cursor.rowcount  # 获取受影响的行数 </span></span><br><span class="line">cursor.close()</span><br><span class="line">conn.commit()  <span class="comment"># 提交事务，非常重要</span></span><br><span class="line">conn.close()</span><br><span class="line"><span class="comment"># 参数问题  使用&#x27;?&#x27;占位符</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;select * from user where name=? and pwd=?&#x27;</span>, (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;password&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="使用MySQL"><a href="#使用MySQL" class="headerlink" title="使用MySQL"></a>使用MySQL</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL常用引擎是InnoDB</span></span><br><span class="line">mysql -u root -p   <span class="comment"># 登陆</span></span><br><span class="line">show variables like <span class="string">&#x27;%char%&#x27;</span>;   <span class="comment"># 检查编码格式,推荐在配置文件中设置为utf8mb4</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mysql <span class="keyword">import</span> connector</span><br><span class="line">conn = connector.connect(user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;pass&#x27;</span>,database=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">&#x27;sql&#x27;</span>)</span><br><span class="line"><span class="comment"># 其他操作与SQLite使用相同</span></span><br><span class="line"><span class="comment"># (不同点):MySQL的SQL占位符是%s</span></span><br></pre></td></tr></table></figure>

<h4 id="使用SQLAlchemy"><a href="#使用SQLAlchemy" class="headerlink" title="使用SQLAlchemy"></a>使用SQLAlchemy</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SQLAlchemy是python中最著名的ORM（Object Relationship Mapping）框架</span></span><br><span class="line"><span class="comment"># ORM框架的作用就是把数据库表的一行记录与一个对象互相做自动转换</span></span><br><span class="line"><span class="comment"># pip install sqlalchemy</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017803857459008">重新学习SQLAIchemy</a></p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1 &#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#333333</span>;</span></span><br><span class="line">      font-size: 48px;</span><br><span class="line"><span class="css">      <span class="selector-tag">text-shadow</span>: 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-id">#666666</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>)[<span class="number">0</span>].style.color = <span class="string">&#x27;#ff0000&#x27;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="WSGI接口"><a href="#WSGI接口" class="headerlink" title="WSGI接口"></a>WSGI接口</h4><ul>
<li>Web Server Gateway Interface</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])  <span class="comment"># headers</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b&#x27;&lt;h1&gt;Hello, web!&lt;/h1&gt;&#x27;</span>]   <span class="comment"># body</span></span><br><span class="line"><span class="comment"># environ：一个包含所有HTTP请求信息的dict对象</span></span><br><span class="line"><span class="comment"># start_response：一个发送HTTP响应的函数，headers</span></span><br><span class="line"><span class="comment"># application()函数必须由WSGI服务器来调用</span></span><br><span class="line"><span class="comment"># environ[&#x27;PATH_INFO&#x27;][1:]  # [1:]是为了去掉/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 认识原理,此代码不具有实用价值  # 处理不同HTTP方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span>(<span class="params">environ, start_response</span>):</span></span><br><span class="line">    method = environ[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>]</span><br><span class="line">    path = environ[<span class="string">&#x27;PATH_INFO&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">&#x27;GET&#x27;</span> <span class="keyword">and</span> path==<span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> handle_home(environ, start_response)</span><br><span class="line">    <span class="keyword">if</span> method==<span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> path=<span class="string">&#x27;/signin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> handle_signin(environ, start_response)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<h4 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line">app = Flask(__name__)  <span class="comment"># 创建app</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;,methed=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;Home&lt;/h1&gt;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/signin&#x27;,methed=[&#x27;GET&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin_form</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;&lt;form action=&quot;/signin&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;input name=&quot;username&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;input name=&quot;password&quot; type=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;p&gt;&lt;button type=&quot;submit&quot;&gt;Sign In&lt;/button&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">              &lt;/form&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/signin&#x27;, methods=[&#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signin</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.form[<span class="string">&#x27;username&#x27;</span>]==<span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> request.form[<span class="string">&#x27;password&#x27;</span>]==<span class="string">&#x27;password&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;h3&gt;Hello, admin!&lt;/h3&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h3&gt;Bad username or password.&lt;/h3&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Review</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Review</tag>
      </tags>
  </entry>
  <entry>
    <title>Run-Back</title>
    <url>/notes/run-back/</url>
    <content><![CDATA[<h4 id="0-“-amp-”"><a href="#0-“-amp-”" class="headerlink" title="0. “&amp;”"></a>0. “&amp;”</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般我们可在结尾加上&quot;&amp;&quot;来将命令同时放入后台运行</span><br><span class="line">但是关掉会话之后，进程就会被杀掉</span><br></pre></td></tr></table></figure>

<h4 id="1-nohup"><a href="#1-nohup" class="headerlink" title="1. nohup"></a>1. nohup</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup ping www.ibm.com &amp;</span><br><span class="line"># nohup 的用途就是让提交的命令忽略 hangup 信号</span><br><span class="line"># 标准输出和标准错误缺省会被重定向到 nohup.out 文件中，也可使用 &gt;filename 2&gt;&amp;1 来重定向文件名</span><br><span class="line">nohup python3 run.py &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="2-setsid"><a href="#2-setsid" class="headerlink" title="2. setsid"></a>2. setsid</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setsid ping www.ibm.com</span><br><span class="line"># 将命令进程放到1号进程下面（就不是子进程了，不再接收hangup信号）</span><br></pre></td></tr></table></figure>

<h4 id="3-subshell-的小技巧"><a href="#3-subshell-的小技巧" class="headerlink" title="3. subshell 的小技巧"></a>3. subshell 的小技巧</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(ping www.ibm.com &amp;)</span><br><span class="line"># 括号包起来</span><br><span class="line"># 让命令在subshell运行</span><br><span class="line"># 父 ID（PPID）为1，不属于当前终端的子进程，从而也就不会受到当前终端的 HUP 信号的影响了。</span><br></pre></td></tr></table></figure>

<h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-nohup/">让进程在后台运行更可靠的几种方法</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy-Redis</title>
    <url>/notes/scrapy-redis/</url>
    <content><![CDATA[<h4 id="Scrapy-redis"><a href="#Scrapy-redis" class="headerlink" title="Scrapy-redis"></a>Scrapy-redis</h4><h5 id="spider编写"><a href="#spider编写" class="headerlink" title="spider编写"></a>spider编写</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span>(<span class="params">RedisSpider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;myspider&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># do stuff</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用调度redis中的存储请求队列</span></span><br><span class="line">SCHEDULER = <span class="string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span></span><br><span class="line"><span class="comment"># 确保所有蜘蛛通过redis共享同一个过滤器。</span></span><br><span class="line">DUPEFILTER_CLASS = <span class="string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span></span><br><span class="line"><span class="comment"># 不清理redis队列，允许暂停/恢复爬网。</span></span><br><span class="line">SCHEDULER_PERSIST = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 使用优先级队列调度请求。（默认）</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">&#x27;scrapy_redis.queue.PriorityQueue&#x27;</span></span><br><span class="line"><span class="comment"># 备用队列。</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">&#x27;scrapy_redis.queue.FifoQueue&#x27;</span></span><br><span class="line">SCHEDULER_QUEUE_CLASS = <span class="string">&#x27;scrapy_redis.queue.LifoQueue&#x27;</span></span><br><span class="line"><span class="comment"># 防止蜘蛛在分布式爬网时关闭的最大空闲时间。这仅在队列类为SpiderQueue或SpiderStack时有效，并且在蜘蛛第一次启动时也可能会阻止这么长的时间（因为队列为空）。</span></span><br><span class="line">SCHEDULER_IDLE_BEFORE_CLOSE = <span class="number">10</span></span><br><span class="line"><span class="comment"># 将爬取的item存储在redis数据库中</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 存储item的redis的key</span></span><br><span class="line">REDIS_ITEMS_KEY = <span class="string">&#x27;%(spider)s:items&#x27;</span></span><br><span class="line"><span class="comment"># 默认情况下，item的序列化程序是ScrapyJSONEncoder。</span></span><br><span class="line">REDIS_ITEMS_SERIALIZER = <span class="string">&#x27;json.dumps&#x27;</span></span><br><span class="line"><span class="comment"># 连接Redis时，使用的主机和端口（可选）。</span></span><br><span class="line">REDIS_HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">REDIS_PORT = <span class="number">6379</span></span><br><span class="line"><span class="comment"># 指定用于连接Redis的完整URL（可选）。</span></span><br><span class="line"><span class="comment"># 如果设置，它将优先于REDIS_HOST和REDIS_PORT设置。</span></span><br><span class="line">REDIS_URL = <span class="string">&#x27;redis://user:pass@hostname:9001&#x27;</span></span><br><span class="line"><span class="comment"># 自定义Redis客户端参数（即：套接字超时等）</span></span><br><span class="line">REDIS_PARAMS  = &#123;&#125;</span><br><span class="line"><span class="comment"># 是否对初始urls去重，默认False，为不去重</span></span><br><span class="line">REDIS_START_URLS_AS_SET = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 获取起始URL默认的redis key。</span></span><br><span class="line">REDIS_START_URLS_KEY = <span class="string">&#x27;%(name)s:start_urls&#x27;</span></span><br><span class="line"><span class="comment"># 使用utf-8以外的其他编码对redis进行编码，默认是utf-8</span></span><br><span class="line"><span class="comment"># REDIS_ENCODING = &#x27;latin1&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="启动spider"><a href="#启动spider" class="headerlink" title="启动spider"></a>启动spider</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. run the spider:</span></span><br><span class="line">scrapy runspider myspider.py</span><br><span class="line"><span class="comment"># 2. push urls to redis:</span></span><br><span class="line">redis-cli lpush myspider:start_urls http://google.com</span><br><span class="line"><span class="comment"># 两者先后顺序不重要，因为 SCHEDULER_IDLE_BEFORE_CLOSE = 10 会等待</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Spider</tag>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy-Shell</title>
    <url>/notes/scrapy-shell/</url>
    <content><![CDATA[<h4 id="使用scrapy的shell测试网站"><a href="#使用scrapy的shell测试网站" class="headerlink" title="使用scrapy的shell测试网站"></a>使用scrapy的shell测试网站</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给scrapy shell 调试加上headers</span></span><br><span class="line">scrapy shell <span class="comment"># 进入shell,但没有url</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;User-Agent:Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;</span>&#125;</span><br><span class="line">req = scrapy.Request(url=<span class="string">&#x27;url&#x27;</span>,headers=headers)</span><br><span class="line">fetch(req) <span class="comment"># 如此就等价于scrapy shell url # 添加了headers</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Spider</tag>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy</title>
    <url>/notes/scrapy/</url>
    <content><![CDATA[<h4 id="scrapy的一些知识点"><a href="#scrapy的一些知识点" class="headerlink" title="scrapy的一些知识点"></a>scrapy的一些知识点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令加上参数 --nolog 可以去掉log日志输出</span><br></pre></td></tr></table></figure>

<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.downloadermiddlewares.retry <span class="keyword">import</span> RetryMiddleware <span class="comment"># 参考这个写即可</span></span><br><span class="line"><span class="comment"># 设置最大等待时间、失败重试次数</span></span><br><span class="line">DOWNLOAD_TIMEOUT = <span class="number">10</span></span><br><span class="line">RETRY_ENABLED = <span class="literal">True</span>  <span class="comment"># 失败重试</span></span><br><span class="line">RETRY_TIMES = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="scrapy复习笔记"><a href="#scrapy复习笔记" class="headerlink" title="scrapy复习笔记"></a>scrapy复习笔记</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">allowed_domains = [] <span class="comment"># 与OffsiteMiddleware中间件挂钩</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scrapy.FormRequest() <span class="comment"># post请求</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.downloadermiddlewares.retry <span class="keyword">import</span> RetryMiddleware </span><br><span class="line"><span class="comment"># 异常处理，必须看源码，必须对异常进行处理</span></span><br></pre></td></tr></table></figure>

<h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get()和getall()</span><br><span class="line">get(default&#x3D;&#39;not-found&#39;) #设置默认值</span><br><span class="line">.attrib[&#39;src&#39;]  # 获取属性值，它返回第一个匹配元素的属性</span><br><span class="line">scrapy css特有的::text和::attr(name)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(&#39;base&#39;).attrib   # 变成dict了</span><br><span class="line">&#123;&#39;href&#39;: &#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;&#125;</span><br><span class="line">&gt;&gt;&gt; response.css(&#39;base&#39;).attrib[&#39;href&#39;]</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39; </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 例子</span><br><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;base&#x2F;@href&#39;).get()</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;base::attr(href)&#39;).get()</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;base&#39;).attrib[&#39;href&#39;]</span><br><span class="line">&#39;http:&#x2F;&#x2F;example.com&#x2F;&#39;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a[contains(@href, &quot;image&quot;)]&#x2F;@href&#39;).getall()</span><br><span class="line">[&#39;image1.html&#39;,</span><br><span class="line"> &#39;image2.html&#39;,</span><br><span class="line"> &#39;image3.html&#39;,</span><br><span class="line"> &#39;image4.html&#39;,</span><br><span class="line"> &#39;image5.html&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a[href*&#x3D;image]::attr(href)&#39;).getall()</span><br><span class="line">[&#39;image1.html&#39;,</span><br><span class="line"> &#39;image2.html&#39;,</span><br><span class="line"> &#39;image3.html&#39;,</span><br><span class="line"> &#39;image4.html&#39;,</span><br><span class="line"> &#39;image5.html&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;a[contains(@href, &quot;image&quot;)]&#x2F;img&#x2F;@src&#39;).getall()</span><br><span class="line">[&#39;image1_thumb.jpg&#39;,</span><br><span class="line"> &#39;image2_thumb.jpg&#39;,</span><br><span class="line"> &#39;image3_thumb.jpg&#39;,</span><br><span class="line"> &#39;image4_thumb.jpg&#39;,</span><br><span class="line"> &#39;image5_thumb.jpg&#39;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; response.css(&#39;a[href*&#x3D;image] img::attr(src)&#39;).getall()</span><br><span class="line">[&#39;image1_thumb.jpg&#39;,</span><br><span class="line"> &#39;image2_thumb.jpg&#39;,</span><br><span class="line"> &#39;image3_thumb.jpg&#39;,</span><br><span class="line"> &#39;image4_thumb.jpg&#39;,</span><br><span class="line"> &#39;image5_thumb.jpg&#39;]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(&#39;&#x2F;&#x2F;span&#x2F;text()&#39;).get()</span><br><span class="line">&#39;good&#39;</span><br><span class="line">&gt;&gt;&gt; response.css(&#39;span::text&#39;).get()</span><br><span class="line">&#39;good&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Selector类可以用文本直接构造，用于xpath解析</span><br><span class="line">&gt;&gt;&gt; from scrapy.selector import Selector</span><br><span class="line">&gt;&gt;&gt; body &#x3D; &#39;&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;&#x2F;span&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&#39;</span><br><span class="line">&gt;&gt;&gt; Selector(text&#x3D;body).xpath(&#39;&#x2F;&#x2F;span&#x2F;text()&#39;).get()</span><br><span class="line">&#39;good&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">response.css(&#39;.shout&#39;).xpath(&#39;.&#x2F;time&#x2F;@datetime&#39;).getall()  # xpath的&#39;.&#39;点号必须加上</span><br></pre></td></tr></table></figure>

<h5 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fetch(url[, redirect=<span class="literal">True</span>])   <span class="comment">#  Fetch URL and update local objects</span></span><br><span class="line">fetch(req)                    <span class="comment">#  Fetch a scrapy.Request and update local objects</span></span><br><span class="line">shelp()           <span class="comment"># Shell help (print this help)  很重要，常用，类似于help</span></span><br><span class="line">view(response)    <span class="comment"># View response in a browser</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scrapy.shell.inspect_response的用法如下：便于运行时，检查</span></span><br><span class="line"><span class="keyword">from</span> scrapy.shell <span class="keyword">import</span> inspect_response</span><br><span class="line">inspect_response(response, self)</span><br></pre></td></tr></table></figure>

<h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FormRequest.from_response()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Spider</tag>
        <tag>V</tag>
      </tags>
  </entry>
  <entry>
    <title>Search-Api</title>
    <url>/notes/search-api/</url>
    <content><![CDATA[<p><strong>如何查找一个网站的api接口</strong></p>
<ul>
<li>主要是通过百度查询api，搜一下，基本上都有</li>
</ul>
<p><img src="https://i.loli.net/2020/09/08/387TvyMekhRQsNr.png" alt="那么如何判断一个网站是否开放api呢？有3种方法"></p>
<a id="more"></a>

]]></content>
      <categories>
        <category>Develop</category>
      </categories>
      <tags>
        <tag>II</tag>
        <tag>Develop</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/notes/shell/</url>
    <content><![CDATA[<h4 id="Shell脚本格式"><a href="#Shell脚本格式" class="headerlink" title="Shell脚本格式"></a>Shell脚本格式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash   开头指定解释器</span></span><br></pre></td></tr></table></figure>

<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 输出</span><br><span class="line">echo &#39;Hello World...&#39;</span><br><span class="line">source 配置文件  # 让修改后的配置信息立即生效</span><br><span class="line"># chmod 744 myshell.sh  # 授权</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 系统变量</span><br><span class="line">env命令 可以查看系统全局变量</span><br><span class="line">printenv命令 查看指定环境变量的值 等价于$USER</span><br><span class="line">例子 $HOME $PWD $SHELL $USER</span><br><span class="line"># 用户自定义变量</span><br><span class="line">声明是 echo $A # 可以直接定义,不声明</span><br><span class="line">A&#x3D;100  # 定义  如果变量值有空格时，必须加双引号。</span><br><span class="line">使用是 B&#x3D;$A  # 定义静态变量：readonly A&#x3D;90 但是不能unset  </span><br><span class="line">unset a  # 删除变量 在unset引用变量名时，不要加$。</span><br><span class="line"># set 显示当前shell中所有变量</span><br><span class="line"># 变量一般为大写，等号左右不能有空格</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建全局变量的方法是先创建一个局部变量,然后导出到全局环境中</span><br><span class="line">export A</span><br><span class="line">在子shell中修改全局变量并不会影响到父shell中该变量的值。</span><br></pre></td></tr></table></figure>

<h5 id="将命令结果赋值给变量"><a href="#将命令结果赋值给变量" class="headerlink" title="将命令结果赋值给变量"></a>将命令结果赋值给变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A&#x3D;$(ls -a)  等价于 A&#x3D;&#96;ls -a&#96;  # 反引号 </span><br></pre></td></tr></table></figure>

<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 单行注释</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 多行注释如下</span></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">语句</span><br><span class="line">!</span><br></pre></td></tr></table></figure>

<h5 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法有$n和$*和$@和$#和$&#123;10&#125;</span><br><span class="line">$$ 当前进程PID</span><br><span class="line">$! 后台运行的最后一个进程的PID</span><br><span class="line">$? 最后一次执行的命令的返回状态,0正确，非零执行不正确</span><br></pre></td></tr></table></figure>

<h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((运算式))和$[运算式]  # 推荐使用$[运算式]  # 没有expr</span><br><span class="line"># expr m + n  # 可以 + - \* &#x2F; % 加 减 乘 除 取余</span><br></pre></td></tr></table></figure>

<h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 基本语法和格式</span></span><br><span class="line">[ condition ]（注意 condition 前后要有空格）</span><br><span class="line">非空返回 true，可使用$?验证（结果为：0 为 true，&gt;1 为 false）</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用判断条件（左右两边有空格）</span></span><br><span class="line">= 字符串比较</span><br><span class="line">-lt 小于</span><br><span class="line">-le 小于等于</span><br><span class="line">-eq 等于</span><br><span class="line">-gt 大于</span><br><span class="line">-ge 大于等于</span><br><span class="line">-ne 不等于</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照文件权限进行判断</span></span><br><span class="line">-r 有读的权限 [ -r 文件 ]</span><br><span class="line">-w 有写的权限</span><br><span class="line">-x 有执行的权限</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照文件类型进行判断  <span class="comment"># 例子 [ -e /root/a.txt ]</span></span></span><br><span class="line">-f 文件存在并且是一个常规的文件</span><br><span class="line">-e 文件存在</span><br><span class="line">-d 文件存在并是一个目录</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> 格式</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">if [ &quot;str&quot; = &quot;s1tr&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;str equal&quot;</span><br><span class="line">elif [ 100 = 101 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;100 equal&quot;</span><br><span class="line">elif [ &quot;str1&quot; = &quot;str1&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;str1 equal&quot;</span><br><span class="line">	if [ 123 = 123 ]</span><br><span class="line">    then</span><br><span class="line">        echo &quot;123 equal&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;123 not equal&quot;</span><br><span class="line">	fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">case</span>语句</span></span><br><span class="line">case $变量名 in </span><br><span class="line">    &quot;值1&quot;)</span><br><span class="line">        语句</span><br><span class="line">        ;;</span><br><span class="line">    &quot;值2&quot;)</span><br><span class="line">        语句</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        语句</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> 语句</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实例1</span></span><br><span class="line">for i in 1 2 3 4  # 1 2 3 4 可以替换为 &quot;$*&quot;和&quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">   echo &quot;$i&quot;</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 实例2</span></span><br><span class="line">for((i=1;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">    echo &quot;$i&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">while</span> 语句</span></span><br><span class="line">i=1</span><br><span class="line">while [ $i -le 10 ]</span><br><span class="line">do </span><br><span class="line">    echo &quot;num=$i&quot;</span><br><span class="line">    i=$[$i+1]  # 加一</span><br><span class="line">    let i=$i+1 # 加一   # let ：用来执行算数运算和数值表达式测试</span><br><span class="line">    let i++    # 加一   # let 命令的替代表示形式是 ((算术表达式))</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<h5 id="控制台输入"><a href="#控制台输入" class="headerlink" title="控制台输入"></a>控制台输入</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read -p &quot;请输入一个数num1=&quot; -t 10 NUM1  # -p 为提示符 -t 是等待时间</span><br></pre></td></tr></table></figure>

<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 系统函数</span></span><br><span class="line">basename [string] [suffix] # 返回文件名</span><br><span class="line">suffix 为后缀，如果 suffix 被指定了，basename 会将 string 中的 suffix 去掉。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 系统函数</span></span><br><span class="line">dirname 文件绝对路径  # 返回目录</span><br><span class="line">返回完整路径最后&#x27;/&#x27;的前面的部分，常用于返回路径部分</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 自定义函数</span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">function get_sum()&#123;</span><br><span class="line">    local sum=0  #局部变量</span><br><span class="line">    sum=$[$sum+$1+$2]</span><br><span class="line">    echo $sum</span><br><span class="line">    return $?</span><br><span class="line">&#125;</span><br><span class="line">m=100</span><br><span class="line">n=200</span><br><span class="line">total=$(get_sum $m $n)</span><br><span class="line">echo &quot;The sum is $total&quot;</span><br></pre></td></tr></table></figure>

<h5 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim命令</span><br><span class="line">set tabstop=4</span><br><span class="line">set nu</span><br><span class="line">set nonu</span><br><span class="line">G</span><br><span class="line">gg</span><br><span class="line">u # 撤销</span><br><span class="line">shift+g</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Sort</title>
    <url>/notes/sort/</url>
    <content><![CDATA[<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h5 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">稳定：如果a原本在b前面，而a&#x3D;b，排序之后a仍然在b的前面；</span><br><span class="line">不稳定：如果a原本在b的前面，而a&#x3D;b，排序之后a可能会出现在b的后面；</span><br><span class="line">内排序：所有排序操作都在内存中完成；</span><br><span class="line">外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</span><br><span class="line">时间复杂度：一个算法执行所耗费的时间。</span><br><span class="line">空间复杂度：运行完一个程序所需内存的大小。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h5><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015233043168-1867817869.png" alt="算法总结.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图片名词解释</span><br><span class="line">n: 数据规模</span><br><span class="line">k: “桶”的个数</span><br><span class="line">In-place: 占用常数内存，不占用额外内存</span><br><span class="line">Out-place: 占用额外内存</span><br></pre></td></tr></table></figure>

<h5 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h5><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015233220637-1055088118.png" alt="算法分类.png"></p>
<h3 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h3><h5 id="1-冒泡-Bubble-Sort"><a href="#1-冒泡-Bubble-Sort" class="headerlink" title="1. 冒泡 Bubble Sort"></a>1. 冒泡 Bubble Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">相邻两两比较、交换</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n)   最差情况：T(n) &#x3D; O(n2)   平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure>

<h5 id="2-选择排序-Selection-Sort"><a href="#2-选择排序-Selection-Sort" class="headerlink" title="2. 选择排序 Selection Sort"></a>2. 选择排序 Selection Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在未排list中找到最小，放到排序后的list末尾</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n2)  最差情况：T(n) &#x3D; O(n2)  平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure>

<h5 id="3-插入排序-Insertion-Sort"><a href="#3-插入排序-Insertion-Sort" class="headerlink" title="3. 插入排序 Insertion Sort"></a>3. 插入排序 Insertion Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将未排序的list，一个一个插入到已排序的list中</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n)   最坏情况：T(n) &#x3D; O(n2)   平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure>

<h5 id="4-希尔排序-Shell-Sort"><a href="#4-希尔排序-Shell-Sort" class="headerlink" title="4. 希尔排序 Shell Sort"></a>4. 希尔排序 Shell Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">插入排序的变种：定义增量，以增量为间隔，进行插入排序，逐渐减小增量</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(nlog2 n)  最坏情况：T(n) &#x3D; O(nlog2 n)  平均情况：T(n) &#x3D;O(nlog n)</span><br></pre></td></tr></table></figure>

<h5 id="5-归并排序-Merge-Sort"><a href="#5-归并排序-Merge-Sort" class="headerlink" title="5. 归并排序 Merge Sort"></a>5. 归并排序 Merge Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将list不断分为两个子序列，直到只有1个或者2个元素（递归）</span><br><span class="line">将两个排序好的子序列合并成一个最终的排序序列（返回值）</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n)  最差情况：T(n) &#x3D; O(nlogn)  平均情况：T(n) &#x3D; O(nlogn)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">arr</span>):</span></span><br><span class="line">    <span class="comment"># divide to two</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    mid = <span class="built_in">int</span>(<span class="built_in">len</span>(arr)/<span class="number">2</span>)</span><br><span class="line">    left = merge_sort(arr[:mid])</span><br><span class="line">    right = merge_sort(arr[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">left, right</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(left) <span class="keyword">and</span> j &lt; <span class="built_in">len</span>(right):</span><br><span class="line">        <span class="keyword">if</span> left[i] &lt; right[j]:</span><br><span class="line">            result.append(left[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">    <span class="comment"># add the larger part both left and right</span></span><br><span class="line">    result += left[i:]</span><br><span class="line">    result += right[j:]</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h5 id="6-快速排序-Quick-Sort"><a href="#6-快速排序-Quick-Sort" class="headerlink" title="6. 快速排序 Quick Sort"></a>6. 快速排序 Quick Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个基准，左边list小于或等于基准，右边list大于list</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(nlogn)   最差情况：T(n) &#x3D; O(n2)   平均情况：T(n) &#x3D; O(nlogn)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qucik_sort</span>(<span class="params">alist</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(alist) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    <span class="keyword">return</span> qucik_sort([i <span class="keyword">for</span> i <span class="keyword">in</span> alist[<span class="number">1</span>:] <span class="keyword">if</span> i &lt; alist[<span class="number">0</span>]]) + alist[<span class="number">0</span>:<span class="number">1</span>] + qucik_sort([i <span class="keyword">for</span> i <span class="keyword">in</span> alist[<span class="number">1</span>:] <span class="keyword">if</span> i &gt;= alist[<span class="number">0</span>]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行快排</span><br><span class="line">def qs(a): return qs([i for i in a[1:] if i &lt;&#x3D; a[0]]) + a[0:1] + qs([i for i in a[1:] if i &gt; a[0]]) if len(a) &gt; 1 else a</span><br></pre></td></tr></table></figure>

<h5 id="7-堆排序-Heap-Sort"><a href="#7-堆排序-Heap-Sort" class="headerlink" title="7. 堆排序 Heap Sort"></a>7. 堆排序 Heap Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_40596016&#x2F;article&#x2F;details&#x2F;79711682</span><br></pre></td></tr></table></figure>

<h5 id="8-计数排序-Counting-Sort"><a href="#8-计数排序-Counting-Sort" class="headerlink" title="8. 计数排序 Counting Sort"></a>8. 计数排序 Counting Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">它只能对整数进行排序</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n+k)  最差情况：T(n) &#x3D; O(n+k)  平均情况：T(n) &#x3D; O(n+k)</span><br></pre></td></tr></table></figure>

<h5 id="9-桶排序-Bucket-Sort"><a href="#9-桶排序-Bucket-Sort" class="headerlink" title="9. 桶排序 Bucket Sort"></a>9. 桶排序 Bucket Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">桶排序是计数排序的升级版</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n+k)   最差情况：T(n) &#x3D; O(n+k)   平均情况：T(n) &#x3D; O(n2)</span><br></pre></td></tr></table></figure>

<h5 id="10-基数排序-Radix-Sort"><a href="#10-基数排序-Radix-Sort" class="headerlink" title="10. 基数排序 Radix Sort"></a>10. 基数排序 Radix Sort</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最佳情况：T(n) &#x3D; O(n * k)   最差情况：T(n) &#x3D; O(n * k)   平均情况：T(n) &#x3D; O(n * k)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ComputerBasics</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title>Supervisor</title>
    <url>/notes/supervisor/</url>
    <content><![CDATA[<h3 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h3><h4 id="专业名称解释"><a href="#专业名称解释" class="headerlink" title="专业名称解释"></a>专业名称解释</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">supervisor：要安装的软件的名称。</span><br><span class="line">supervisord：装好supervisor软件后，supervisord用于启动supervisor服务。</span><br><span class="line">supervisorctl：用于管理supervisor配置文件中program。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>centos7</li>
</ul>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y supervisor</span><br><span class="line">systemctl enable supervisord <span class="comment"># 开机自启动</span></span><br><span class="line">systemctl start supervisord <span class="comment"># 启动supervisord服务</span></span><br><span class="line">systemctl status supervisord <span class="comment"># 查看supervisord服务状态</span></span><br><span class="line">ps -ef|grep supervisord <span class="comment"># 查看是否存在supervisord进程</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 可以看到配置文件位置</span><br><span class="line"># 主配置文件在&#x2F;etc&#x2F;supervisord.conf</span><br><span class="line"># 子配置文件放在&#x2F;etc&#x2F;supervisord.d目录里面  # 以.ini结束的配置文件</span><br></pre></td></tr></table></figure>

<h4 id="配置为supervisor服务"><a href="#配置为supervisor服务" class="headerlink" title="配置为supervisor服务"></a>配置为supervisor服务</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/supervisord.service</span><br><span class="line"><span class="comment"># 将下面一段配置信息粘贴进去(类似/usr/bin/supervisord的路径需要自己修改对应的)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Process Monitoring <span class="keyword">and</span> Control Daemon</span><br><span class="line">After=rc-local.service nss-user-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/supervisord.pid</span><br><span class="line">ExecStart=/usr/<span class="built_in">bin</span>/supervisord -c /etc/supervisord.conf</span><br><span class="line">ExecStop=/usr/<span class="built_in">bin</span>/supervisorctl shutdown</span><br><span class="line">ExecReload=/usr/<span class="built_in">bin</span>/supervisorctl reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure   <span class="comment"># 非正常退出，会重启</span></span><br><span class="line">RestartSec=<span class="number">42</span>s   <span class="comment"># 重启之前等待42秒</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">启动服务</span><br><span class="line">systemctl enable supervisord</span><br><span class="line">检查是否启动成功</span><br><span class="line">systemctl <span class="keyword">is</span>-enabled supervisord  <span class="comment"># 出现enabled，则启动成功</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以使用如下命令管理supervisor服务了</span></span><br><span class="line">systemctl stop supervisord</span><br><span class="line">systemctl start supervisord</span><br><span class="line">systemctl status supervisord</span><br><span class="line">systemctl reload supervisord</span><br><span class="line">systemctl restart supervisord</span><br></pre></td></tr></table></figure>

<h3 id="supervisor简单使用"><a href="#supervisor简单使用" class="headerlink" title="supervisor简单使用"></a>supervisor简单使用</h3><h4 id="开放到外网"><a href="#开放到外网" class="headerlink" title="开放到外网"></a>开放到外网</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">port=*:<span class="number">9001</span>                ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">username=user              ;登录管理后台的用户名</span><br><span class="line">password=<span class="number">123</span>               ;登录管理后台的密码</span><br></pre></td></tr></table></figure>

<h4 id="子进程配置"><a href="#子进程配置" class="headerlink" title="子进程配置"></a>子进程配置</h4><ul>
<li>讲解</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#项目名</span></span><br><span class="line">[program:blog]</span><br><span class="line"><span class="comment">#脚本目录</span></span><br><span class="line">directory=/opt/<span class="built_in">bin</span></span><br><span class="line"><span class="comment">#脚本执行命令</span></span><br><span class="line">command=/usr/<span class="built_in">bin</span>/python /opt/<span class="built_in">bin</span>/test.py</span><br><span class="line"></span><br><span class="line"><span class="comment">#supervisor启动的时候是否随着同时启动，默认True</span></span><br><span class="line">autostart=true</span><br><span class="line"><span class="comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span></span><br><span class="line">autorestart=false</span><br><span class="line"><span class="comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span></span><br><span class="line">startsecs=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#脚本运行的用户身份 </span></span><br><span class="line">user = test</span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出 </span></span><br><span class="line">stderr_logfile=/tmp/blog_stderr.log </span><br><span class="line">stdout_logfile=/tmp/blog_stdout.log </span><br><span class="line"><span class="comment">#把stderr重定向到stdout，默认 false</span></span><br><span class="line">redirect_stderr = true</span><br><span class="line"><span class="comment">#stdout日志文件大小，默认 50MB</span></span><br><span class="line">stdout_logfile_maxbytes = <span class="number">20</span>M</span><br><span class="line"><span class="comment">#stdout日志文件备份数</span></span><br><span class="line">stdout_logfile_backups = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<ul>
<li>例子</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[program:test] </span><br><span class="line">directory=/root </span><br><span class="line">command=/usr/sbin/tinyproxy -c /etc/tinyproxy/tinyproxy.conf</span><br><span class="line">autostart=true </span><br><span class="line">autorestart=false </span><br><span class="line">stderr_logfile=/root/tmp/tinyproxy/test_stderr.log </span><br><span class="line">stdout_logfile=/root/tmp/tinyproxy/test_stdout.log </span><br><span class="line"><span class="comment">#user = test</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Tome</title>
    <url>/notes/tome/</url>
    <content><![CDATA[<p>关于职业规划</p>
<p>职业规划很重要</p>
<p>关键节点选择很重要，不要频繁跳槽</p>
<p>跳槽需要选择可以给简历增加加分项的</p>
<p>如，名企、核心部门、核心技术、管理岗位</p>
<p>注意蓬勃发展的创业公司，拿股票，等公司上市了，就可以实现财务自由了</p>
<p>普通工程师到</p>
 <a id="more"></a>

]]></content>
      <categories>
        <category>Management</category>
      </categories>
      <tags>
        <tag>Management</tag>
      </tags>
  </entry>
  <entry>
    <title>Unittest</title>
    <url>/notes/unittest/</url>
    <content><![CDATA[<h1 id="unittest"><a href="#unittest" class="headerlink" title="unittest"></a>unittest</h1><p>核心例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> unittest_demo.Calculator <span class="keyword">import</span> Calculator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestCalculator</span>(<span class="params">unittest.TestCase</span>):</span>  <span class="comment"># 1、继承unittest.TestCase类</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testDivide01</span>(<span class="params">self</span>):</span>  <span class="comment"># 2、以test开头的函数</span></span><br><span class="line">        cal = Calculator()</span><br><span class="line">        result = cal.divide(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">        self.assertEqual(result, <span class="number">5</span>)  <span class="comment"># 3、使用断言判断结果</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testDivide02</span>(<span class="params">self</span>):</span></span><br><span class="line">        cal = Calculator()</span><br><span class="line">        result = cal.divide(<span class="number">20</span>, <span class="number">0.5</span>)</span><br><span class="line">        self.assertEqual(result, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()  <span class="comment"># 4、用unittest.main()执行所有test开头的函数，每个函数就是一个测试用例</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="unittest-1"><a href="#unittest-1" class="headerlink" title="unittest"></a>unittest</h3><ul>
<li>面向对象</li>
<li>测试用例的组成：用例编号、模块、测试标题、前提条件、操作步骤、期望结果、世纪结果</li>
</ul>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>测试脚手架 test fixture</li>
<li>测试用例 TestCase 基类</li>
<li>测试套件 test suite</li>
<li>测试运行器 test runner</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setUp和tearDown 设置初始化和状态还原</span><br><span class="line">unittest.main() <span class="comment"># 开始执行测试</span></span><br><span class="line">self.assertEqual <span class="comment"># assertTrue、assertFalse</span></span><br><span class="line"><span class="comment"># assertRaises(), assertRaisesRegex(), assertWarns(), assertWarnsRegex()</span></span><br><span class="line"><span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 命令 python -m unittest ...</span></span><br></pre></td></tr></table></figure>

<p> <em>常见判断方法：</em></p>
 <img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201027100723.png" alt="image-20201027100723831" style="zoom: 33%;" />

 <img src="https://gitee.com/zhouyuanmin/images/raw/master/imgs/20201027101027.png" alt="image-20201027101027126" style="zoom: 33%;" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试套件 test suite</span><br><span class="line">def suite():</span><br><span class="line">    suite &#x3D; unittest.TestSuite()</span><br><span class="line">    suite.addTest(WidgetTestCase(&#39;test_default_widget_size&#39;))  # 这是一个测试方法名</span><br><span class="line">    suite.addTest(WidgetTestCase(&#39;test_widget_resize&#39;)) # 这是一个测试方法名</span><br><span class="line">    return suite</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    runner &#x3D; unittest.TextTestRunner()</span><br><span class="line">    runner.run(suite())</span><br></pre></td></tr></table></figure>

<h3 id="跳过测试与预计的失败"><a href="#跳过测试与预计的失败" class="headerlink" title="跳过测试与预计的失败"></a>跳过测试与预计的失败</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 跳过测试</span><br><span class="line">@unittest.skip</span><br><span class="line">@unittest.skipIf</span><br><span class="line">@unittest.skipUnless</span><br><span class="line"># 预计失败</span><br><span class="line">@unittest.expectedFailure</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Unittest</tag>
      </tags>
  </entry>
  <entry>
    <title>Utils</title>
    <url>/notes/utils/</url>
    <content><![CDATA[<h3 id="一些好用的工具"><a href="#一些好用的工具" class="headerlink" title="一些好用的工具"></a>一些好用的工具</h3><h4 id="axel"><a href="#axel" class="headerlink" title="axel"></a>axel</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 多线程下载工具-替代curl和wget</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用</span></span><br><span class="line">axel -n 20 http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a>lrzsz</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一款linux下命令行界面上支持上传和下载的第三方工具</span></span><br><span class="line">rz  <span class="comment"># 选择文件进行上传</span></span><br><span class="line">sz 文件名  <span class="comment"># sz后面跟文件名可以进行文件从linux上面下载</span></span><br><span class="line">yum install -y lrzsz  <span class="comment"># yum 安装完毕之后可以直接rz尝试使用</span></span><br></pre></td></tr></table></figure>

<h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">(status, output) = subprocess.getstatusoutput(<span class="string">&#x27;ps -ef | grep python3&#x27;</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&#x27;kill -9 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">set</span>(re.findall(<span class="string">r&#x27;\d&#123;3,6&#125;&#x27;</span>, output)))))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualenv</title>
    <url>/notes/virtualenv/</url>
    <content><![CDATA[<h2 id="Virtualenv-amp-Virtualenvwrapper"><a href="#Virtualenv-amp-Virtualenvwrapper" class="headerlink" title="Virtualenv&amp;Virtualenvwrapper"></a>Virtualenv&amp;Virtualenvwrapper</h2><p>virtualenv是一个python虚拟环境，能够和系统环境相隔离，保持环境的纯净。</p>
<p>virtualenvwrapper可以方便的管理虚拟环境。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">easy_install virtualenvwrapper</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim ~/.bash_profile</span></span><br><span class="line">export WORKON_HOME=$HOME/virtualenvs</span><br><span class="line">export VIRTUALENVWRAPPER_SCRIPT=/Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenvwrapper.sh</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/Library/Frameworks/Python.framework/Versions/3.6/bin/python3</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=/Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenv</span><br><span class="line">source /Library/Frameworks/Python.framework/Versions/3.6/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure>

<h4 id="使用virtualenv"><a href="#使用virtualenv" class="headerlink" title="使用virtualenv"></a>使用virtualenv</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv virenv1</span><br></pre></td></tr></table></figure>

<h4 id="使用virtualenvwrapper"><a href="#使用virtualenvwrapper" class="headerlink" title="使用virtualenvwrapper"></a>使用virtualenvwrapper</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv env1  # 默认创建</span><br><span class="line">mkvirtualenv --python=/usr/bin/python2.7 env  # 创建 --python可以指定python</span><br><span class="line">lsvirtualenv -b # 列出虚拟环境</span><br><span class="line">workon env1 # 切换虚拟环境</span><br><span class="line">cpvirtualenv env1 env3  # 复制虚拟环境</span><br><span class="line">deactivate # 退出虚拟环境</span><br><span class="line">rmvirtualenv env1 # 删除虚拟环境</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>V</tag>
        <tag>Virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/notes/vue/</url>
    <content><![CDATA[<p>总结了vue全家桶的全面所有知识点如下:</p>
<p><a href="https://blog.csdn.net/weixin_43342105/article/details/106153672">基础语法</a></p>
<p><a href="https://blog.csdn.net/weixin_43342105/article/details/105703491">核心内容+重点细节</a></p>
<p><a href="https://blog.csdn.net/weixin_43342105/article/details/106248521">vue-cli2-3</a></p>
<p><a href="https://blog.csdn.net/weixin_43342105/article/details/106248594">router知识点</a></p>
<p><a href="https://blog.csdn.net/weixin_43342105/article/details/105740102">axios框架</a></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
